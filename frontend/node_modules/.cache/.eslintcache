[{"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/index.js":"1","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/App.js":"2","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Airport.js":"3","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Login.js":"4","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Profile.js":"5","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Signup.js":"6","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Travelling.js":"7","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Passport.js":"8","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js":"9","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Trip.js":"10","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/GuessForm.js":"11","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js":"12","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Info.js":"13"},{"size":358,"mtime":1617805262066,"results":"14","hashOfConfig":"15"},{"size":2615,"mtime":1618608889025,"results":"16","hashOfConfig":"15"},{"size":2244,"mtime":1618603826810,"results":"17","hashOfConfig":"15"},{"size":2085,"mtime":1617828869283,"results":"18","hashOfConfig":"15"},{"size":4647,"mtime":1618250932636,"results":"19","hashOfConfig":"15"},{"size":1917,"mtime":1617825912321,"results":"20","hashOfConfig":"15"},{"size":3176,"mtime":1618767090467,"results":"21","hashOfConfig":"15"},{"size":1007,"mtime":1618250958013,"results":"22","hashOfConfig":"15"},{"size":14655,"mtime":1618602405955,"results":"23","hashOfConfig":"15"},{"size":1260,"mtime":1618252994985,"results":"24","hashOfConfig":"15"},{"size":10162,"mtime":1618430635578,"results":"25","hashOfConfig":"15"},{"size":12011,"mtime":1618432189353,"results":"26","hashOfConfig":"15"},{"size":3613,"mtime":1618608654186,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"152fu9t",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/index.js",[],["60","61"],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/App.js",["62","63"],"import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Switch, Route, Redirect, useHistory } from \"react-router-dom\";\nimport Airport from \"./Airport\";\nimport Passport from \"./Passport\";\nimport Profile from \"./Profile\";\nimport Travelling from \"./Travelling\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\nimport Info from \"./Info\";\n\nfunction App() {\n  const API = \"http://localhost:3000\";\n  const [user, setUser] = useState(null);\n  const [travelMode, setTravelMode] = useState(\"\");\n  const history = useHistory();\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetch(`${API}/me`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n        .then((r) => r.json())\n        .then((user) => {\n          setUser(user);\n        });\n      // } else {\n      //   history.push(\"/login\");\n    }\n  }, []);\n\n  return (\n    <>\n      {user ? (\n        <Switch>\n          <Route exact path=\"/passport\">\n            <Passport user={user} api={API} />\n          </Route>\n          <Route exact path=\"/profile\">\n            <Profile user={user} api={API} setUser={setUser} />\n          </Route>\n          <Route exact path=\"/travelling\">\n            <Travelling travelMode={\"Find Yourself\"} api={API} user={user} />\n          </Route>\n          <Route exact path=\"/info\">\n            <Info />\n          </Route>\n          <Route exact path=\"/\">\n            <Airport\n              setTravelMode={setTravelMode}\n              setUser={setUser}\n              user={user}\n            />\n          </Route>\n          <Route exact path=\"/*\">\n            <Redirect\n              to={{\n                pathname: \"/\",\n              }}\n            />\n          </Route>\n        </Switch>\n      ) : (\n        <Switch>\n          <Route exact path=\"/login\">\n            <div id=\"welcome-holder\">\n              <span id=\"welcome-frame\">\n                <br></br>\n                <Login api={API} setUser={setUser} />\n              </span>\n            </div>\n          </Route>\n\n          <Route path=\"/signup\">\n            <div id=\"welcome-holder\">\n              <span id=\"welcome-frame\">\n                <br></br>\n                <Signup api={API} setUser={setUser} />\n              </span>\n            </div>\n          </Route>\n\n          <Route exact path=\"/info\">\n            <Info />\n          </Route>\n\n          <Route exact path=\"/*\">\n            <Redirect\n              to={{\n                pathname: \"/login\",\n              }}\n            />\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Airport.js",[],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Login.js",[],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Profile.js",[],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Signup.js",[],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Travelling.js",["64"],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Passport.js",["65"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Trip from \"./Trip\";\nimport world from \"./world.png\";\n\nfunction Passport({ user, api }) {\n  const history = useHistory();\n  const [trips, setTrips] = useState([]);\n\n  useEffect(() => {\n    fetch(`${api}/usertrips/${user.id}`)\n      .then((r) => r.json())\n      .then((tList) => setTrips(tList));\n  }, []);\n\n  return (\n    <div\n      style={{\n        background: `url(${world})`,\n        height: \"100vh\",\n        width: \"100%\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <h1>Here is your passport!</h1>\n      {trips.map((trip, i) => {\n        return <Trip key={i} trip={trip} api={api} setTrips={setTrips} />;\n      })}\n      <br></br>\n      <div\n        className=\"content content-button\"\n        key={trips.length + 1}\n        onClick={() => history.push(\"/\")}\n      >\n        Back to Terminal\n      </div>\n    </div>\n  );\n}\n\nexport default Passport;\n","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js",["66","67"],"import React, { useState, useRef, useEffect } from \"react\";\n// import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address,\n  englishOnly,\n  setEnglishOnly,\n}) {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n    if (newMessage) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"user\", text: newMessage },\n      ]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = address.initial_greetings;\n    let dontUnderstand = address.dont_understand;\n    let greetings = address.greetings;\n    let ok = address.ok;\n    let correct = address.correct.yes;\n    let incorrect = address.correct.no;\n\n    let msg = newMessage.toLocaleLowerCase();\n\n    if (\n      (address.name && msg.includes(address.name.toLocaleLowerCase())) ||\n      (address.state && msg.includes(address.state.toLocaleLowerCase())) ||\n      (address.country && msg.includes(address.country.toLocaleLowerCase())) ||\n      (address.continent && msg.includes(address.continent.toLocaleLowerCase()))\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof correct === \"string\"\n              ? correct\n              : englishOnly\n              ? correct.english_sentence\n              : {\n                  l: correct.in_language,\n                  t: correct.translation_arr,\n                },\n        },\n      ]);\n    } else if (msg.includes(\"are we in\")) {\n      // they can only land here if they typed \"are we in\" but *didn't* guess the name of the location\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof incorrect === \"string\"\n              ? incorrect\n              : englishOnly\n              ? incorrect.english_sentence\n              : {\n                  l: incorrect.in_language,\n                  t: incorrect.translation_arr,\n                },\n        },\n      ]);\n    } else if (includesFood(msg)) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.food === \"string\"\n              ? address.food\n              : englishOnly\n              ? address.food.english_sentence\n              : {\n                  l: address.food.in_language,\n                  t: address.food.translation_arr,\n                },\n        },\n      ]);\n    } else if (includesLanguage(msg)) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.language === \"string\"\n              ? address.language\n              : englishOnly\n              ? address.language.english_sentence\n              : {\n                  l: address.language.in_language,\n                  t: address.language.translation_arr,\n                },\n        },\n      ]);\n    } else if (includesReligion(msg)) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.religion === \"string\"\n              ? address.religion\n              : englishOnly\n              ? address.religion.english_sentence\n              : {\n                  l: address.religion.in_language,\n                  t: address.religion.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"information\") ||\n      msg.includes(\"facts\") ||\n      msg.includes(\"tell me\") ||\n      msg.includes(\"this place\")\n    ) {\n      let fact = facts[Math.floor(Math.random() * facts.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof fact === \"string\"\n              ? fact\n              : englishOnly\n              ? fact.english_sentence\n              : {\n                  l: fact.in_language,\n                  t: fact.translation_arr,\n                },\n        },\n      ]);\n    } else if (messages.length <= 1) {\n      let greeting =\n        initialGreetings[Math.floor(Math.random() * initialGreetings.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof greeting === \"string\"\n              ? greeting\n              : englishOnly\n              ? greeting.english_sentence\n              : {\n                  l: greeting.in_language,\n                  t: greeting.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"okay\") ||\n      msg.includes(\"ok\") ||\n      msg.includes(\"alright\") ||\n      msg === \"kay\" ||\n      msg === \"k\" ||\n      msg === \"no\" ||\n      msg.includes(\"fine\") ||\n      msg.includes(\"very well\")\n    ) {\n      let okay = ok[Math.floor(Math.random() * ok.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof okay === \"string\"\n              ? okay\n              : englishOnly\n              ? okay.english_sentence\n              : {\n                  l: okay.in_language,\n                  t: okay.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"hey\") ||\n      // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n      msg.includes(\"whatsup\") ||\n      msg.includes(\"whatsgood\") ||\n      msg.includes(\"what's up\") ||\n      msg.includes(\"what's good\") ||\n      msg.includes(\"hello\") ||\n      msg.includes(\"howdy\") ||\n      msg.includes(\"hola\") ||\n      msg === \"hi\" ||\n      msg.includes(\"good morning\") ||\n      msg.includes(\"good day\") ||\n      msg.includes(\"how are you\") ||\n      msg.includes(\"what's the sitch\")\n    ) {\n      let greeting = greetings[Math.floor(Math.random() * greetings.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof greeting === \"string\"\n              ? greeting\n              : englishOnly\n              ? greeting.english_sentence\n              : {\n                  l: greeting.in_language,\n                  t: greeting.translation_arr,\n                },\n        },\n      ]);\n    } else {\n      let du = // *d*on't *u*nderstand\n        dontUnderstand[Math.floor(Math.random() * dontUnderstand.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof du === \"string\"\n              ? du\n              : englishOnly\n              ? du.english_sentence\n              : {\n                  l: du.in_language,\n                  t: du.translation_arr,\n                },\n        },\n      ]);\n    }\n  }\n\n  function includesFood(msg) {\n    let english = [\n      \"food\",\n      \"dinner\",\n      \"lunch\",\n      \"breakfast\",\n      \"hungry\",\n      \"snack\",\n      \"eat\",\n      \"grub\",\n      \"meal\",\n      \"bite\",\n      \"hunger\",\n    ];\n    let spanish = [\n      \"comida\",\n      \"cena\",\n      \"almuerzo\",\n      \"desayuno\",\n      \"hambriento\",\n      \"bocadillo\",\n      \"comer\",\n      \"comida\",\n      \"comida\",\n      \"morder\",\n      \"hambre\",\n    ];\n    let french = [\n      \"aliments\",\n      \"dîner\",\n      \"déjeuner\",\n      \"petit-déjeuner\",\n      \"dejeuner\",\n      \"diner\",\n      \"manger\",\n      \"petit-dejeuner\",\n      \"repas\",\n      \"mordre\",\n      \"faim\",\n    ];\n    let german = [\n      \"lebensmittel\",\n      \"abendessen\",\n      \"mittagessen\",\n      \"frühstück\",\n      \"hungrig\",\n      \"snack\",\n      \"essen\",\n      \"fruhstuck\",\n      \"mahlzeit\",\n      \"beißen\",\n      \"hunger\",\n    ];\n    let portuguese = [\n      \"cafe de manha\",\n      \"jantar\",\n      \"almoço\",\n      \"café da manhã\",\n      \"refeicao\",\n      \"lanche\",\n      \"comer\",\n      \"almoco\",\n      \"refeição\",\n      \"comida\",\n      \"fome\",\n    ];\n    let italian = [\n      \"cibo\",\n      \"cena\",\n      \"pranzo\",\n      \"prima colazione\",\n      \"Affamato\",\n      \"merenda\",\n      \"mangiare\",\n      \"mangia\",\n      \"pasto\",\n      \"mordere\",\n      \"fame\",\n    ];\n\n    if (address.language_name === \"spanish\") {\n      return checkTwoArrForString(english, spanish, msg);\n    } else if (address.language_name === \"german\") {\n      return checkTwoArrForString(english, german, msg);\n    } else if (address.language_name === \"italian\") {\n      return checkTwoArrForString(english, italian, msg);\n    } else if (address.language_name === \"french\") {\n      return checkTwoArrForString(english, french, msg);\n    } else if (address.language_name === \"portuguese\") {\n      return checkTwoArrForString(english, portuguese, msg);\n    } else {\n      return checkTwoArrForString(english, english, msg);\n    }\n  }\n\n  function includesLanguage(msg) {\n    let english = [\"language\", \"tongue\", \"speak\", \"english\", \"idioma\"];\n    let spanish = [\"idioma\", \"lengua\", \"habla\", \"inglés\", \"idioma\"];\n    let french = [\"langue\", \"langue\", \"parle\", \"anglais\", \"idioma\"];\n    let german = [\"sprache\", \"zunge\", \"sprech\", \"englisch\", \"idiom\"];\n    let portuguese = [\"idioma\", \"língua\", \"falar\", \"inglês\", \"idioma\"];\n    let italian = [\"lingua\", \"lingua\", \"parla\", \"inglese\", \"idioma\"];\n\n    if (address.language_name === \"spanish\") {\n      return checkTwoArrForString(english, spanish, msg);\n    } else if (address.language_name === \"german\") {\n      return checkTwoArrForString(english, german, msg);\n    } else if (address.language_name === \"italian\") {\n      return checkTwoArrForString(english, italian, msg);\n    } else if (address.language_name === \"french\") {\n      return checkTwoArrForString(english, french, msg);\n    } else if (address.language_name === \"portuguese\") {\n      return checkTwoArrForString(english, portuguese, msg);\n    } else {\n      return checkTwoArrForString(english, english, msg);\n    }\n  }\n\n  function includesReligion(msg) {\n    let english = [\n      \"religion\",\n      \"religious\",\n      \"holy\",\n      \"godly\",\n      \"pray\",\n      \"god\",\n      \"worship\",\n      \"temple\",\n      \"synagogue\",\n      \"church\",\n    ];\n    let spanish = [\n      \"religión\",\n      \"religioso\",\n      \"santo\",\n      \"piadoso\",\n      \"rezar\",\n      \"Dios\",\n      \"Adoración\",\n      \"templo\",\n      \"sinagoga\",\n      \"Iglesia\",\n    ];\n    let french = [\n      \"religion\",\n      \"religieux\",\n      \"Saint\",\n      \"pieux\",\n      \"prier\",\n      \"dieu\",\n      \"culte\",\n      \"temple\",\n      \"synagogue\",\n      \"église\",\n    ];\n    let german = [\n      \"religion\",\n      \"religiös\",\n      \"heilig\",\n      \"göttlich\",\n      \"beten\",\n      \"gott\",\n      \"anbetung\",\n      \"tempel\",\n      \"synagoge\",\n      \"kirche\",\n    ];\n    let portuguese = [\n      \"religião\",\n      \"religioso\",\n      \"sagrado\",\n      \"piedoso\",\n      \"rezar\",\n      \"deus\",\n      \"adoração\",\n      \"têmpora\",\n      \"sinagoga\",\n      \"Igreja\",\n    ];\n    let italian = [\n      \"religione\",\n      \"religioso\",\n      \"santo\",\n      \"pio\",\n      \"pregare\",\n      \"Dio\",\n      \"culto\",\n      \"tempio\",\n      \"sinagoga\",\n      \"Chiesa\",\n    ];\n\n    if (address.language_name === \"spanish\") {\n      return checkTwoArrForString(english, spanish, msg);\n    } else if (address.language_name === \"german\") {\n      return checkTwoArrForString(english, german, msg);\n    } else if (address.language_name === \"italian\") {\n      return checkTwoArrForString(english, italian, msg);\n    } else if (address.language_name === \"french\") {\n      return checkTwoArrForString(english, french, msg);\n    } else if (address.language_name === \"portuguese\") {\n      return checkTwoArrForString(english, portuguese, msg);\n    } else {\n      return checkTwoArrForString(english, english, msg);\n    }\n  }\n\n  function checkTwoArrForString(arr1, arr2, str) {\n    // two arr expected to have same length\n    for (let i = 0; i < arr1.length; i++) {\n      if (str.includes(arr1[i]) || str.includes(arr2[i])) {\n        return true;\n      } else {\n      }\n    }\n    return false;\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <div className=\"head\">\n        Chat\n        <span\n          className=\"close-mode-box\"\n          style={{ color: \"yellow\", backgroundColor: \"#2d3436\" }}\n          onClick={(e) => setChatShowing(false)}\n        >\n          ―\n        </span>\n      </div>\n      <div className=\"messages\" ref={messageEl}>\n        {messages.map((m, i) => (\n          <div\n            className=\"msg\"\n            key={i}\n            style={\n              m.who === \"bot\"\n                ? { backgroundColor: \"lightblue\" }\n                : { backgroundColor: \"white\", textAlign: \"right\" }\n            }\n          >\n            {m.who === \"bot\" ? (\n              <>\n                <span\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => setSecretFlag(!secretFlag)}\n                >\n                  {secretFlag ? address.flag_emoji : \"🙂\"}\n                </span>{\" \"}\n                <span>\n                  {typeof m.text === \"string\"\n                    ? m.text\n                    : m.text.l.map((word, i) => (\n                        <>\n                          <span className=\"tooltip\">\n                            {word}\n                            <span class=\"tooltiptext\">{m.text.t[i]}</span>\n                          </span>{\" \"}\n                        </>\n                      ))}\n                </span>{\" \"}\n              </>\n            ) : (\n              m.text + \"  🧳\"\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"footer\">\n        <span onClick={() => setEnglishOnly(!englishOnly)}>\n          {englishOnly ? address.globe_emoji : \"🇬🇧\"}\n        </span>\n        <form onSubmit={handleSend}>\n          <span>\n            <input\n              type=\"text\"\n              placeholder={\n                messages.length ? \"reply...\" : \"Start conversation...\"\n              }\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n            ></input>\n            <button style={{ backgroundColor: \"green\", color: \"white\" }}>\n              Send\n            </button>\n          </span>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Trip.js",[],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/GuessForm.js",[],"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js",["68","69"],"import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { MapillaryViewer } from \"react-mapillary\";\n// const europe = [\n//   \"Albania\",\n//   \"Andorra\",\n//   \"Armenia\",\n//   \"Austria\",\n//   \"Azerbaijan\",\n//   \"Belarus\",\n//   \"Belgium\",\n//   \"Bosnia and Herzegovina\",\n//   \"Bosnia\",\n//   \"Herzegovina\",\n//   \"Bosnia-Herzegovina\",\n//   \"Bulgaria\",\n//   \"Croatia\",\n//   \"Cyprus\",\n//   \"Czechia\",\n//   \"Denmark\",\n//   \"Estonia\",\n//   \"Finland\",\n//   \"France\",\n//   \"Georgia\",\n//   \"Germany\",\n//   \"Greece\",\n//   \"Hungary\",\n//   \"Iceland\",\n//   \"Ireland\",\n//   \"Italy\",\n//   \"Kazakhstan\",\n//   \"Kosovo\",\n//   \"Latvia\",\n//   \"Liechtenstein\",\n//   \"Lithuania\",\n//   \"Luxembourg\",\n//   \"Malta\",\n//   \"Moldova\",\n//   \"Monaco\",\n//   \"Montenegro\",\n//   \"Netherlands\",\n//   \"North Macedonia\",\n//   \"Macedonia\",\n//   \"Norway\",\n//   \"Poland\",\n//   \"Portugal\",\n//   \"Romania\",\n//   \"Russia\",\n//   \"San Marino\",\n//   \"Serbia\",\n//   \"Slovakia\",\n//   \"Slovenia\",\n//   \"Spain\",\n//   \"Sweden\",\n//   \"Switzerland\",\n//   \"Turkey\",\n//   \"Ukraine\",\n//   \"United Kingdom\",\n//   \"UK\",\n//   \"Vatican City\",\n// ];\n// const asia = [\n//   \"Afghanistan\",\n//   \"Armenia\",\n//   \"Azerbaijan\",\n//   \"Bahrain\",\n//   \"Bangladesh\",\n//   \"Bhutan\",\n//   \"Brunei\",\n//   \"Cambodia\",\n//   \"China\",\n//   \"Cyprus\",\n//   \"Georgia\",\n//   \"India\",\n//   \"Indonesia\",\n//   \"Iran\",\n//   \"Iraq\",\n//   \"Israel\",\n//   \"Japan\",\n//   \"Jordan\",\n//   \"Kazakhstan\",\n//   \"Kuwait\",\n//   \"Kyrgyzstan\",\n//   \"Laos\",\n//   \"Lebanon\",\n//   \"Macao\",\n//   \"Macau\",\n//   \"Malaysia\",\n//   \"Maldives\",\n//   \"Mongolia\",\n//   \"Myanmar\",\n//   \"Burma\",\n//   \"Nepal\",\n//   \"North Korea\",\n//   \"Oman\",\n//   \"Pakistan\",\n//   \"Palestine\",\n//   \"Philippines\",\n//   \"Qatar\",\n//   \"Russia\",\n//   \"Saudi Arabia\",\n//   \"Singapore\",\n//   \"South Korea\",\n//   \"Sri Lanka\",\n//   \"Syria\",\n//   \"Taiwan\",\n//   \"Tajikistan\",\n//   \"Thailand\",\n//   \"Timor-Leste\",\n//   \"Turkey\",\n//   \"Turkmenistan\",\n//   \"United Arab Emirates\",\n//   \"UAE\",\n//   \"Uzbekistan\",\n//   \"Vietnam\",\n//   \"Yemen\",\n// ];\n// const africa = [\n//   \"Algeria\",\n//   \"Angola\",\n//   \"Benin\",\n//   \"Botswana\",\n//   \"Burkina Faso\",\n//   \"Burundi\",\n//   \"Cabo Verde\",\n//   \"Cameroon\",\n//   \"Central African Republic\",\n//   \"CAR\",\n//   \"Chad\",\n//   \"Comoros\",\n//   \"Congo, Democratic Republic of the\",\n//   \"Democratic Republic of the Congo\",\n//   \"Congo, Republic of the\",\n//   \"Republic of the Congo\",\n//   \"Cote d'Ivoire\",\n//   \"Djibouti\",\n//   \"Egypt\",\n//   \"Equatorial Guinea\",\n//   \"Eritrea\",\n//   \"Eswatini\",\n//   \"Swaziland\",\n//   \"Ethiopia\",\n//   \"Gabon\",\n//   \"Gambia\",\n//   \"Ghana\",\n//   \"Guinea\",\n//   \"Guinea-Bissau\",\n//   \"Kenya\",\n//   \"Lesotho\",\n//   \"Liberia\",\n//   \"Libya\",\n//   \"Madagascar\",\n//   \"Malawi\",\n//   \"Mali\",\n//   \"Mauritania\",\n//   \"Mauritius\",\n//   \"Morocco\",\n//   \"Mozambique\",\n//   \"Namibia\",\n//   \"Niger\",\n//   \"Nigeria\",\n//   \"Rwanda\",\n//   \"Sao Tome and Principe\",\n//   \"Sao Tome\",\n//   \"Principe\",\n//   \"Saint Thomas and Prince\",\n//   \"Senegal\",\n//   \"Seychelles\",\n//   \"Sierra Leone\",\n//   \"Somalia\",\n//   \"South Africa\",\n//   \"South Sudan\",\n//   \"Sudan\",\n//   \"Tanzania\",\n//   \"Togo\",\n//   \"Tunisia\",\n//   \"Uganda\",\n//   \"Zambia\",\n//   \"Zimbabwe\",\n// ];\n// const northAmerica = [\n//   \"Antigua and Barbuda\",\n//   \"Bahamas\",\n//   \"Barbados\",\n//   \"Belize\",\n//   \"Canada\",\n//   \"Costa Rica\",\n//   \"Cuba\",\n//   \"Dominica\",\n//   \"Dominican Republic\",\n//   \"El Salvador\",\n//   \"Grenada\",\n//   \"Guatemala\",\n//   \"Haiti\",\n//   \"Honduras\",\n//   \"Jamaica\",\n//   \"Mexico\",\n//   \"Nicaragua\",\n//   \"Panama\",\n//   \"Saint Kitts and Nevis\",\n//   \"Saint Lucia\",\n//   \"Saint Vincent and the Grenadines\",\n//   \"Trinidad and Tobago\",\n//   \"United States of America\",\n//   \"United States\",\n//   \"US\",\n//   \"USA\",\n//   \"Anguilla\",\n//   \"Aruba\",\n//   \"Bermuda\",\n//   \"Bonaire\",\n//   \"British Virgin Islands\",\n//   \"Cayman Islands\",\n//   \"Clipperton Island\",\n//   \"Curacao\",\n//   \"Greenland\",\n//   \"Guadeloupe\",\n//   \"Martinique\",\n//   \"Montserrat\",\n//   \"Navassa Island\",\n//   \"Puerto Rico\",\n//   \"Saba\",\n//   \"Saint Barthelemy\",\n//   \"Saint Martin\",\n//   \"Saint Pierre and Miquelon\",\n//   \"Sint Eustatius\",\n//   \"Sint Maarten\",\n//   \"Turks and Caicos Islands\",\n//   \"US Virgin Islands\",\n// ];\n// const southAmerica = [\n//   \"Argentina\",\n//   \"Bolivia\",\n//   \"Brazil\",\n//   \"Chile\",\n//   \"Colombia\",\n//   \"Ecuador\",\n//   \"Guyana\",\n//   \"Paraguay\",\n//   \"Peru\",\n//   \"Suriname\",\n//   \"Uruguay\",\n//   \"Venezuela\",\n//   \"Falkland Islands\",\n//   \"Falkland Islands (Islas Malvinas)\",\n//   \"Islas Malvinas\",\n//   \"French Guiana\",\n//   \"South Georgia and the South Sandwich Islands\",\n// ];\n// const oceania = [\n//   \"Australia\",\n//   \"Fiji\",\n//   \"Kiribati\",\n//   \"Marshall Islands\",\n//   \"Micronesia\",\n//   \"Nauru\",\n//   \"New Zealand\",\n//   \"Palau\",\n//   \"Papua New Guinea\",\n//   \"Samoa\",\n//   \"Solomon Islands\",\n//   \"Tonga\",\n//   \"Tuvalu\",\n//   \"Vanuatu\",\n//   \"American Samoa\",\n//   \"Cook Islands\",\n//   \"French Polynesia\",\n//   \"Guam\",\n//   \"New Caledonia\",\n//   \"Niue\",\n//   \"Norfolk Island\",\n//   \"Northern Mariana Islands\",\n//   \"Pitcairn Islands\",\n//   \"Tokelau\",\n//   \"Wake Island\",\n//   \"Wallis and Futuna\",\n// ];\n\nfunction Map({ imgKey }) {\n  const [latlong, setLatlong] = useState({ lat: 0, long: 0 });\n  console.log(latlong);\n\n  {\n    //the following comments are mostly from when i was fetching random mapillary images - and they depended on state being located here.\n    // function randCoord() {\n    //   // LATITUDE -90 to +90\n    //   let lat = (Math.random() * 90).toFixed(3);\n    //   if (Math.random() < 0.5) {\n    //     lat = lat * -1;\n    //   }\n    //   // LONGITUDE -180 to + 180\n    //   let long = (Math.random() * 180).toFixed(3);\n    //   if (Math.random() < 0.5) {\n    //     long = long * -1;\n    //   }\n    //   return { lat: parseFloat(lat), long: parseFloat(long) }; //why the heck would i need to do this??? long was a string and lat wasnt...\n    // }\n    // function makebbox() {\n    //   const coord = randCoord();\n    //   return {\n    //     minlong: coord.long - 4,\n    //     minlat: coord.lat - 2,\n    //     maxlong: coord.long + 4,\n    //     maxlat: coord.lat + 2,\n    //   };\n    // }\n    // useEffect(() => {\n    //   fetchSequences();\n    // }, []); //[trigger]\n    // function fetchSequences() {\n    //   const bbox = makebbox();\n    //   fetch(\n    //     `https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${\n    //       bbox.minlat\n    //     },${bbox.maxlong},${\n    //       bbox.maxlat\n    //     }&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`\n    //   )\n    //     .then((r) => r.json())\n    //     .then((data) => getApic(data));\n    // }\n    // function getApic(data) {\n    //   console.log(\"justfetchedsomestuff\", data);\n    //   // if (data.features) {\n    //   if (data.features.length < 30) {\n    //     fetchSequences(); //setTrigger(true);\n    //   } else {\n    //     let feature =\n    //       data.features[Math.floor(Math.random() * data.features.length)];\n    //     console.log(\"did this work? grabbing a random sample\", feature);\n    //     let count = 0;\n    //     while (\n    //       feature.properties.coordinateProperties.image_keys.length < 30 &&\n    //       count < 3 * data.features.length\n    //     ) {\n    //       feature = data.features.sample;\n    //       count++;\n    //     }\n    //     if (count === 3 * data.features.length) {\n    //       fetchSequences(); // setTrigger(true);\n    //     } else {\n    //       console.log(feature.properties.coordinateProperties.image_keys[0]);\n    //       setLatlong({\n    //         lat: feature.geometry.coordinates[0],\n    //         long: feature.geometry.coordinates[1],\n    //       });\n    //       setImgKey(feature.properties.coordinateProperties.image_keys[0]);\n    //     }\n    //   }\n    //   //  }\n    // }\n    // console.log(address);\n    // useEffect(() => {\n    //   fetch(`${api}/city_info`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       accept: \"application/json\",\n    //     },\n    //     body: JSON.stringify(latlong),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((body) => handleLocationData(body));\n    // }, [imgKey]); // [latlong]\n    // function handleLocationData(data) {\n    //   setAddress({\n    //     city: \"\",\n    //     state: \"\",\n    //     country: \"\",\n    //     continent: \"\",\n    //   });\n    //   console.log(\"does this look right to you?\", data, typeof data);\n    //   if (!data.error) {\n    //     data.forEach((d) => {\n    //       if (d.types.includes(\"country\")) {\n    //         const countryName = d.long_name;\n    //         if (europe.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Europe\",\n    //           }));\n    //         } else if (asia.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Asia\",\n    //           }));\n    //         } else if (africa.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Africa\",\n    //           }));\n    //         } else if (northAmerica.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"North America\",\n    //           }));\n    //         } else if (southAmerica.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"South America\",\n    //           }));\n    //         } else if (oceania.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Oceania/Australia\",\n    //           }));\n    //         }\n    //       } else if (\n    //         d.types.includes(\"locality\") ||\n    //         d.types.includes(\"administrative_area_level_1\")\n    //       ) {\n    //         const stateName = d.long_name;\n    //         setAddress((address) => ({ ...address, state: stateName }));\n    //       } else if (\n    //         d.types.includes(\"sublocality\") ||\n    //         d.types.includes(\"administrative_area_level_2\")\n    //       ) {\n    //         const cityName = d.long_name;\n    //         setAddress((address) => ({ ...address, city: cityName }));\n    //       }\n    //     });\n    //     console.log(\"finished finding geography info\");\n    //     setStamp(!stamp);\n    //   }\n    // }\n    // useEffect(() => {\n    //   fetch(`${api}/stamp/${user.id}`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"content-type\": \"application/json\",\n    //       accept: \"application/json\",\n    //     },\n    //     body: JSON.stringify(address),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((reply) => console.log(\"saved this place, or tried to\", reply));\n    // }, [stamp]);\n  }\n  return (\n    <div\n      id=\"map-container\"\n      // role=\"button\"\n      // tabIndex=\"-1\"\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      <MapillaryViewer\n        clientId=\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n        imageKey={imgKey}\n        // filter={[\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"]}\n        // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n        // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n        onNodeChanged={(node) => {\n          console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n          setLatlong({ lat: node.latLon.lat, long: node.latLon.lon });\n        }}\n        // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n      />\n    </div>\n  );\n}\n\nexport default Map;\n","/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Info.js",["70"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport infopic from \"./info.jpeg\";\n// import { window } from \"react-window\";\n\nfunction Info() {\n  const history = useHistory();\n  return (\n    <div\n      style={{\n        background: `url(${infopic})`,\n        height: \"100vh\",\n        width: \"100%\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div className=\"content content-button\" onClick={() => history.push(\"/\")}>\n        Back\n      </div>\n      <br></br>\n      <div id=\"the-info\">\n        <h1>Couchbound Traveler</h1>\n        <h3>Travel the world from the comfort of your own home!</h3>\n        <p>\n          Welcome to Couchbound Traveler! After logging in, you'll be taken to\n          the Airport, where you have the option to view your passport, edit\n          your personal information, or go on a new trip around the world.{\" \"}\n        </p>\n        <p>\n          Your passport keeps track of all the trips to various cities that you\n          have made so far.\n        </p>\n        <p>\n          When you bravely choose to take flight to a new virtual destination,\n          you will be randomly taken to one of many cities around the world!\n          Your task is to find out where in the world you are (or just explore\n          around freely). To do so, you can navigate with the arrow buttons that\n          show up onscreen, or you can press the space-bar to play through a\n          sequence of images.\n        </p>\n        <small>\n          Warning! If you are motion-sensitive, be careful with using the\n          space-bar, as some image sequences may cause dizziness to some users.\n        </small>\n        <p>\n          If you want to ask questions about the city or country that you are\n          in, see if a local might be able to help you! Click on the \"Chat with\n          a Local\" button to start a conversation.\n        </p>\n        <p>\n          In many supported locations, the local may talk to you in their own\n          language. (Don't worry, all of our wonderful locals understand some\n          English.) If you wish to disable this feature, you can kindly request\n          that the local speak to you in English only, by clicking on the little\n          British flag inside of the chat box. To turn it back on again, just\n          click on the little globe.\n        </p>\n        <p>\n          If you feel you have a pretty good guess of where you are, click on\n          the button to \"Make a Guess\". You can fill in as many or as few of the\n          fields as you want to guess about, and then press \"Check\" to see which\n          pasrts of your guess are correct. If you are wrong, see if you can\n          find more clues or ask more questions to find out! If you want the\n          information about your location revealed to you, click on the \"Reveal\"\n          button in the guess box, and you'll see where in the world you are.\n        </p>\n        <p>\n          When you are ready to leave, simply \"Warp Back to the Airport\". Now\n          your passport will include the trip you just took, and you will be\n          ready to take another journey!\n        </p>\n        <p>\n          We live in an enormous world, with such a beautiful diversity of\n          people, languages, and cultures. Learning about others, learning about\n          ourselves, and learning about the world we all live in - these things\n          go hand-in-hand!\n        </p>\n        <p>Have a blast and learn a lot, World Traveler! Bon Voyage!</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Info;\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":15,"column":10,"nodeType":"77","messageId":"78","endLine":15,"endColumn":20},{"ruleId":"75","severity":1,"message":"79","line":16,"column":9,"nodeType":"77","messageId":"78","endLine":16,"endColumn":16},{"ruleId":"80","severity":1,"message":"81","line":35,"column":6,"nodeType":"82","endLine":35,"endColumn":8,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"81","line":14,"column":6,"nodeType":"82","endLine":14,"endColumn":8,"suggestions":"84"},{"ruleId":"75","severity":1,"message":"85","line":14,"column":10,"nodeType":"77","messageId":"78","endLine":14,"endColumn":25},{"ruleId":"75","severity":1,"message":"86","line":14,"column":27,"nodeType":"77","messageId":"78","endLine":14,"endColumn":45},{"ruleId":"75","severity":1,"message":"87","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":283,"column":3,"nodeType":"90","messageId":"91","endLine":444,"endColumn":4},{"ruleId":"75","severity":1,"message":"92","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'travelMode' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'api' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["95"],["96"],"'showEnglishWord' is assigned a value but never used.","'setShowEnglishWord' is assigned a value but never used.","'useEffect' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},"Update the dependencies array to be: [api, user.id]",{"range":"100","text":"101"},{"range":"102","text":"101"},[1355,1357],"[api, user.id]",[406,408]]