{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport React from \"react\"; // import * as Mapillary from \"mapillary-js\";\n\nimport { MapillaryViewer } from \"react-mapillary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst europe = [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\", \"Belarus\", \"Belgium\", \"Bosnia and Herzegovina\", \"Bosnia\", \"Herzegovina\", \"Bosnia-Herzegovina\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Czechia\", \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Hungary\", \"Iceland\", \"Ireland\", \"Italy\", \"Kazakhstan\", \"Kosovo\", \"Latvia\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Malta\", \"Moldova\", \"Monaco\", \"Montenegro\", \"Netherlands\", \"North Macedonia\", \"Macedonia\", \"Norway\", \"Poland\", \"Portugal\", \"Romania\", \"Russia\", \"San Marino\", \"Serbia\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\", \"Turkey\", \"Ukraine\", \"United Kingdom\", \"UK\", \"Vatican City\"];\n\nfunction Map({\n  api\n}) {\n  _s();\n\n  const [imgKey, setImgKey] = useState(\"085Gpl_xNxW1Lw2eeEG28w\");\n  const [latlong, setLatlong] = useState({\n    lat: 0,\n    long: 0\n  });\n  const [address, setAddress] = useState({\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    continent: \"\"\n  });\n  console.log(address);\n  useEffect(() => {\n    fetch(`${api}/city_info`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify(latlong)\n    }).then(r => r.json()).then(handleLocationData);\n  }, [latlong]);\n\n  function handleLocationData(data) {\n    console.log(data);\n    data.forEach(d => {\n      if (d.types.includes(\"country\")) {\n        const countryName = d.long_name;\n        setAddress({ ...address,\n          country: countryName\n        });\n\n        if (europe.includes(countryName)) {\n          setAddress({ ...address,\n            continent: \"europe\"\n          });\n        }\n      } else if (d.types.includes(\"locality\")) {\n        const stateName = d.long_name;\n        setAddress({ ...address,\n          state: stateName\n        });\n      } else if (d.types.includes(\"sublocality\")) {\n        const cityName = d.long_name;\n        setAddress({ ...address,\n          city: cityName\n        });\n      }\n    });\n  } // const [clientID, setClientID] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(`${api}/clientID`)\n  //     .then((r) => {\n  //       console.log(\"response before json()\", r);\n  //       r.json();\n  //     })\n  //     .then((r) => {\n  //       console.log(\"client id call response\", r);\n  //       setClientID(r);\n  //     });\n  // }, []);\n  //   useEffect(() => {\n  //     fetch(\n  //       \"https://a.mapillary.com/v3/images?client_id=MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n  //     )\n  //       .then((r) => r.json())\n  //       .then((j) => setImgKey(j.features[10].properties.key));\n  //   }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\" //   role=\"button\"\n    //   tabIndex=\"-1\"\n    ,\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapillaryViewer, {\n      clientId: \"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\",\n      imageKey: imgKey,\n      filter: [\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"],\n      onTiltChanged: tilt => console.log(`Tilt: ${tilt}`),\n      onFovChanged: fov => console.log(`FoV: ${fov}`),\n      onNodeChanged: node => {\n        console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n        setLatlong({\n          lat: node.latLon.lat,\n          long: node.latLon.lon\n        });\n      },\n      onBearingChanged: bearing => console.log(`Bearing: ${bearing}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"sKEcG7aS9W2qw9SX4MYsiXFWtGs=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js"],"names":["useEffect","useState","React","MapillaryViewer","europe","Map","api","imgKey","setImgKey","latlong","setLatlong","lat","long","address","setAddress","city","state","country","continent","console","log","fetch","method","headers","accept","body","JSON","stringify","then","r","json","handleLocationData","data","forEach","d","types","includes","countryName","long_name","stateName","cityName","width","height","tilt","fov","node","latLon","lon","bearing"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport React from \"react\";\n// import * as Mapillary from \"mapillary-js\";\nimport { MapillaryViewer } from \"react-mapillary\";\nconst europe = [\n  \"Albania\",\n  \"Andorra\",\n  \"Armenia\",\n  \"Austria\",\n  \"Azerbaijan\",\n  \"Belarus\",\n  \"Belgium\",\n  \"Bosnia and Herzegovina\",\n  \"Bosnia\",\n  \"Herzegovina\",\n  \"Bosnia-Herzegovina\",\n  \"Bulgaria\",\n  \"Croatia\",\n  \"Cyprus\",\n  \"Czechia\",\n  \"Denmark\",\n  \"Estonia\",\n  \"Finland\",\n  \"France\",\n  \"Georgia\",\n  \"Germany\",\n  \"Greece\",\n  \"Hungary\",\n  \"Iceland\",\n  \"Ireland\",\n  \"Italy\",\n  \"Kazakhstan\",\n  \"Kosovo\",\n  \"Latvia\",\n  \"Liechtenstein\",\n  \"Lithuania\",\n  \"Luxembourg\",\n  \"Malta\",\n  \"Moldova\",\n  \"Monaco\",\n  \"Montenegro\",\n  \"Netherlands\",\n  \"North Macedonia\",\n  \"Macedonia\",\n  \"Norway\",\n  \"Poland\",\n  \"Portugal\",\n  \"Romania\",\n  \"Russia\",\n  \"San Marino\",\n  \"Serbia\",\n  \"Slovakia\",\n  \"Slovenia\",\n  \"Spain\",\n  \"Sweden\",\n  \"Switzerland\",\n  \"Turkey\",\n  \"Ukraine\",\n  \"United Kingdom\",\n  \"UK\",\n  \"Vatican City\",\n];\n\nfunction Map({ api }) {\n  const [imgKey, setImgKey] = useState(\"085Gpl_xNxW1Lw2eeEG28w\");\n  const [latlong, setLatlong] = useState({ lat: 0, long: 0 });\n\n  const [address, setAddress] = useState({\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    continent: \"\",\n  });\n  console.log(address);\n  useEffect(() => {\n    fetch(`${api}/city_info`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\",\n      },\n      body: JSON.stringify(latlong),\n    })\n      .then((r) => r.json())\n      .then(handleLocationData);\n  }, [latlong]);\n\n  function handleLocationData(data) {\n    console.log(data);\n    data.forEach((d) => {\n      if (d.types.includes(\"country\")) {\n        const countryName = d.long_name;\n        setAddress({ ...address, country: countryName });\n        if (europe.includes(countryName)) {\n          setAddress({ ...address, continent: \"europe\" });\n        }\n      } else if (d.types.includes(\"locality\")) {\n        const stateName = d.long_name;\n        setAddress({ ...address, state: stateName });\n      } else if (d.types.includes(\"sublocality\")) {\n        const cityName = d.long_name;\n        setAddress({ ...address, city: cityName });\n      }\n    });\n  }\n\n  // const [clientID, setClientID] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(`${api}/clientID`)\n  //     .then((r) => {\n  //       console.log(\"response before json()\", r);\n  //       r.json();\n  //     })\n  //     .then((r) => {\n  //       console.log(\"client id call response\", r);\n  //       setClientID(r);\n  //     });\n  // }, []);\n\n  //   useEffect(() => {\n  //     fetch(\n  //       \"https://a.mapillary.com/v3/images?client_id=MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n  //     )\n  //       .then((r) => r.json())\n  //       .then((j) => setImgKey(j.features[10].properties.key));\n  //   }, []);\n\n  return (\n    <div\n      id=\"map-container\"\n      //   role=\"button\"\n      //   tabIndex=\"-1\"\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      {/* <h2>\n        Coords: {latlong.lat}ºN, {latlong.long}ºE\n      </h2> */}\n      <MapillaryViewer\n        clientId=\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n        imageKey={imgKey}\n        filter={[\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"]}\n        onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)}\n        onFovChanged={(fov) => console.log(`FoV: ${fov}`)}\n        onNodeChanged={(node) => {\n          console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n          setLatlong({ lat: node.latLon.lat, long: node.latLon.lon });\n        }}\n        onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)}\n      />\n    </div>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}