{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { FixedSizeList, VariableSizeList } from \"react-window\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  function handleSend(e) {\n    e.preventDefault();\n    setMessages(messages => [...messages, {\n      who: \"user\",\n      text: newMessage\n    }]);\n    setNewMessage(\"\");\n    setTimeout(botReply, 800); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n  }\n\n  function botReply() {\n    let msg = newMessage.toLocaleLowerCase();\n\n    if (messages.length <= 1) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: \"Hello! Nice to meet you. If there's something specific you're looking for, I might be able to help.\"\n      }]);\n    } else if (msg.includes(\"hey\") || // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n    msg.includes(\"whatsup\") || msg.includes(\"whatsgood\") || msg.includes(\"what's up\") || msg.includes(\"what's good\") || msg.includes(\"hello\") || msg.includes(\"howdy\") || msg.includes(\"hola\") || msg.includes(\"how are you\") || msg.includes(\"what's the sitch\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: \"Hey! :)\"\n      }]);\n    } else if (msg.includes(\"food\") || msg.includes(\"dinner\") || msg.includes(\"lunch\") || msg.includes(\"breakfast\") || msg.includes(\"hungry\") || msg.includes(\"snack\") || msg.includes(\"eat\") || msg.includes(\"grub\") || msg.includes(\"meal\") || msg.includes(\"bite\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.food\n      }]);\n    } else if (msg.includes(\"language\") || msg.includes(\"tongue\") || msg.includes(\"speak\") || msg.includes(\"english\") || msg.includes(\"idioma\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.language\n      }]);\n    } else if ((msg.includes(\"religion\") || msg.includes(\"prayer\") || msg.includes(\"God\") || msg.includes(\"worship\") || msg.includes(\"temple\") || msg.includes(\"synagogue\") || msg.includes(\"church\")) && address.religion) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.religion\n      }]);\n    } else {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: \"I'm sorry.. I don't quite understand. Try asking another question, or being more specific.\"\n      }]);\n    }\n  }\n\n  const row = ({\n    index,\n    style\n  }) => {\n    // {messages.map((m, i) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"msg\",\n      style: messages[index].who === \"bot\" ? { ...style,\n        backgroundColor: \"lightblue\"\n      } : { ...style,\n        backgroundColor: \"white\"\n      },\n      children: [\" \", messages[index].who === \"bot\" ? \"ðŸ¤–  \" + messages[index].text : messages[index].text + \"  ðŸ™‚\", \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this); // })}\n  };\n\n  function getItemSize(index) {\n    return 45 * Math.ceil(messages[index].text.length / 30);\n  } // function componentDidMount() {\n  //   this.scrollToBottom();\n  // }\n  // function scrollToBottom() {\n  //   this.mesRef.current.scrollTop = this.mesRef.current.scrollHeight;\n  // }\n\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      id: \"chat-header\",\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      ref: messageEl,\n      children: /*#__PURE__*/_jsxDEV(VariableSizeList, {\n        height: 200,\n        width: 150,\n        itemSize: getItemSize,\n        itemCount: messages.length,\n        children: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSend,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"reply...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"green\",\n            color: \"white\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"close-mode-box\",\n      onClick: e => setChatShowing(false),\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"9GpusyJ2MRKRakQXxwxl3ltFvGQ=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js"],"names":["React","useState","useRef","useEffect","FixedSizeList","VariableSizeList","Chat","setChatShowing","messages","setMessages","address","newMessage","setNewMessage","handleSend","e","preventDefault","who","text","setTimeout","botReply","msg","toLocaleLowerCase","length","includes","food","language","religion","row","index","style","backgroundColor","getItemSize","Math","ceil","messageEl","current","addEventListener","event","currentTarget","target","scroll","top","scrollHeight","behavior","value","color"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { FixedSizeList, VariableSizeList } from \"react-window\";\n\nfunction Chat({ setChatShowing, messages, setMessages, address }) {\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  function handleSend(e) {\n    e.preventDefault();\n    setMessages((messages) => [...messages, { who: \"user\", text: newMessage }]);\n    setNewMessage(\"\");\n    setTimeout(botReply, 800); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n  }\n\n  function botReply() {\n    let msg = newMessage.toLocaleLowerCase();\n    if (messages.length <= 1) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            \"Hello! Nice to meet you. If there's something specific you're looking for, I might be able to help.\",\n        },\n      ]);\n    } else if (\n      msg.includes(\"hey\") ||\n      // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n      msg.includes(\"whatsup\") ||\n      msg.includes(\"whatsgood\") ||\n      msg.includes(\"what's up\") ||\n      msg.includes(\"what's good\") ||\n      msg.includes(\"hello\") ||\n      msg.includes(\"howdy\") ||\n      msg.includes(\"hola\") ||\n      msg.includes(\"how are you\") ||\n      msg.includes(\"what's the sitch\")\n    ) {\n      setMessages((messages) => [...messages, { who: \"bot\", text: \"Hey! :)\" }]);\n    } else if (\n      msg.includes(\"food\") ||\n      msg.includes(\"dinner\") ||\n      msg.includes(\"lunch\") ||\n      msg.includes(\"breakfast\") ||\n      msg.includes(\"hungry\") ||\n      msg.includes(\"snack\") ||\n      msg.includes(\"eat\") ||\n      msg.includes(\"grub\") ||\n      msg.includes(\"meal\") ||\n      msg.includes(\"bite\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.food },\n      ]);\n    } else if (\n      msg.includes(\"language\") ||\n      msg.includes(\"tongue\") ||\n      msg.includes(\"speak\") ||\n      msg.includes(\"english\") ||\n      msg.includes(\"idioma\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.language },\n      ]);\n    } else if (\n      (msg.includes(\"religion\") ||\n        msg.includes(\"prayer\") ||\n        msg.includes(\"God\") ||\n        msg.includes(\"worship\") ||\n        msg.includes(\"temple\") ||\n        msg.includes(\"synagogue\") ||\n        msg.includes(\"church\")) &&\n      address.religion\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.religion },\n      ]);\n    } else {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            \"I'm sorry.. I don't quite understand. Try asking another question, or being more specific.\",\n        },\n      ]);\n    }\n  }\n\n  const row = ({ index, style }) => {\n    // {messages.map((m, i) => {\n    return (\n      <div\n        className=\"msg\"\n        key={index}\n        style={\n          messages[index].who === \"bot\"\n            ? { ...style, backgroundColor: \"lightblue\" }\n            : { ...style, backgroundColor: \"white\" }\n        }\n      >\n        {\" \"}\n        {messages[index].who === \"bot\"\n          ? \"ðŸ¤–  \" + messages[index].text\n          : messages[index].text + \"  ðŸ™‚\"}{\" \"}\n      </div>\n    );\n    // })}\n  };\n\n  function getItemSize(index) {\n    return 45 * Math.ceil(messages[index].text.length / 30);\n  }\n\n  // function componentDidMount() {\n  //   this.scrollToBottom();\n  // }\n\n  // function scrollToBottom() {\n  //   this.mesRef.current.scrollTop = this.mesRef.current.scrollHeight;\n  // }\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n\n  return (\n    <div id=\"chatbox\">\n      <h3 id=\"chat-header\">Chat</h3>\n      <div className=\"messages\" ref={messageEl}>\n        <VariableSizeList\n          height={200}\n          width={150}\n          itemSize={getItemSize}\n          itemCount={messages.length}\n        >\n          {row}\n        </VariableSizeList>\n      </div>\n\n      <form onSubmit={handleSend}>\n        {/* how do i get the send button on the same line as the input box ? */}\n        <span>\n          <input\n            type=\"text\"\n            placeholder=\"reply...\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n          ></input>\n          <button style={{ backgroundColor: \"green\", color: \"white\" }}>\n            Send\n          </button>\n        </span>\n      </form>\n      <span className=\"close-mode-box\" onClick={(e) => setChatShowing(false)}>\n        x\n      </span>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}