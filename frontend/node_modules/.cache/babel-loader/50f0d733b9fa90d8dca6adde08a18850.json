{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  function handleSend(e) {\n    e.preventDefault();\n    setMessages(messages => [...messages, {\n      who: \"user\",\n      text: newMessage\n    }]);\n    setNewMessage(\"\");\n    setTimeout(botReply, 800); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n  }\n\n  function botReply() {\n    let msg = newMessage.toLocaleLowerCase();\n\n    if (messages.length <= 1) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: \"Hello! Nice to meet you. If there's something specific you're looking for, I might be able to help.\"\n      }]);\n    } else if (msg.includes(\"hey\") || msg.includes(\"yo\") || msg.includes(\"whatsup\") || msg.includes(\"whatsgood\") || // msg.includes(\"what's up\") ||\n    // msg.includes(\"what's good\") ||\n    msg.includes(\"hello\") || msg.includes(\"howdy\") || msg.includes(\"hola\") // msg.includes(\"how are you\")\n    // msg.includes(\"what's the sitch\")\n    ) {\n        setMessages(messages => [...messages, {\n          who: \"bot\",\n          text: \"Hey! :)\"\n        }]);\n      } else if (msg.includes(\"food\") || msg.includes(\"dinner\") || msg.includes(\"lunch\") || msg.includes(\"breakfast\") || msg.includes(\"hungry\") || msg.includes(\"snack\") || msg.includes(\"eat\") || msg.includes(\"grub\") || msg.includes(\"meal\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.food\n      }]);\n    } else if (msg.includes(\"language\") || msg.includes(\"tongue\") || msg.includes(\"speak\") || msg.includes(\"english\") || msg.includes(\"idioma\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.language\n      }]);\n    } else if ((msg.includes(\"religion\") || msg.includes(\"prayer\") || msg.includes(\"God\") || msg.includes(\"worship\") || msg.includes(\"temple\") || msg.includes(\"synagogue\") || msg.includes(\"church\")) && address.religion) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.religion\n      }]);\n    } else {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: \"I'm sorry.. I don't quite understand. Try asking another question, or being more specific.\"\n      }]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      id: \"chat-header\",\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), messages.map((m, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: m.who === \"bot\" ? {\n          backgroundColor: \"lightblue\"\n        } : {\n          backgroundColor: \"white\"\n        },\n        children: [\" \", m.who === \"bot\" ? \"ðŸ¤–  \" + m.text : m.text + \"  ðŸ™‚\", \" \"]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSend,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"reply...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: \"green\",\n            color: \"white\"\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"close-mode-box\",\n      onClick: e => setChatShowing(false),\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"XKYF7c9cy2B2z7IihwwqYiWFJSA=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js"],"names":["React","useState","Chat","setChatShowing","messages","setMessages","address","newMessage","setNewMessage","handleSend","e","preventDefault","who","text","setTimeout","botReply","msg","toLocaleLowerCase","length","includes","food","language","religion","map","m","i","backgroundColor","target","value","color"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Chat({ setChatShowing, messages, setMessages, address }) {\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  function handleSend(e) {\n    e.preventDefault();\n    setMessages((messages) => [...messages, { who: \"user\", text: newMessage }]);\n    setNewMessage(\"\");\n    setTimeout(botReply, 800); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n  }\n\n  function botReply() {\n    let msg = newMessage.toLocaleLowerCase();\n    if (messages.length <= 1) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            \"Hello! Nice to meet you. If there's something specific you're looking for, I might be able to help.\",\n        },\n      ]);\n    } else if (\n      msg.includes(\"hey\") ||\n      msg.includes(\"yo\") ||\n      msg.includes(\"whatsup\") ||\n      msg.includes(\"whatsgood\") ||\n      // msg.includes(\"what's up\") ||\n      // msg.includes(\"what's good\") ||\n      msg.includes(\"hello\") ||\n      msg.includes(\"howdy\") ||\n      msg.includes(\"hola\")\n      // msg.includes(\"how are you\")\n      // msg.includes(\"what's the sitch\")\n    ) {\n      setMessages((messages) => [...messages, { who: \"bot\", text: \"Hey! :)\" }]);\n    } else if (\n      msg.includes(\"food\") ||\n      msg.includes(\"dinner\") ||\n      msg.includes(\"lunch\") ||\n      msg.includes(\"breakfast\") ||\n      msg.includes(\"hungry\") ||\n      msg.includes(\"snack\") ||\n      msg.includes(\"eat\") ||\n      msg.includes(\"grub\") ||\n      msg.includes(\"meal\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.food },\n      ]);\n    } else if (\n      msg.includes(\"language\") ||\n      msg.includes(\"tongue\") ||\n      msg.includes(\"speak\") ||\n      msg.includes(\"english\") ||\n      msg.includes(\"idioma\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.language },\n      ]);\n    } else if (\n      (msg.includes(\"religion\") ||\n        msg.includes(\"prayer\") ||\n        msg.includes(\"God\") ||\n        msg.includes(\"worship\") ||\n        msg.includes(\"temple\") ||\n        msg.includes(\"synagogue\") ||\n        msg.includes(\"church\")) &&\n      address.religion\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.religion },\n      ]);\n    } else {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            \"I'm sorry.. I don't quite understand. Try asking another question, or being more specific.\",\n        },\n      ]);\n    }\n  }\n\n  return (\n    <div id=\"chatbox\">\n      <h3 id=\"chat-header\">Chat</h3>\n      {messages.map((m, i) => {\n        return (\n          <div\n            key={i}\n            style={\n              m.who === \"bot\"\n                ? { backgroundColor: \"lightblue\" }\n                : { backgroundColor: \"white\" }\n            }\n          >\n            {\" \"}\n            {m.who === \"bot\" ? \"ðŸ¤–  \" + m.text : m.text + \"  ðŸ™‚\"}{\" \"}\n          </div>\n        );\n      })}\n\n      <form onSubmit={handleSend}>\n        {/* how do i get the send button on the same line as the input box ? */}\n        <span>\n          <input\n            type=\"text\"\n            placeholder=\"reply...\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n          ></input>\n          <button style={{ backgroundColor: \"green\", color: \"white\" }}>\n            Send\n          </button>\n        </span>\n      </form>\n      <span className=\"close-mode-box\" onClick={(e) => setChatShowing(false)}>\n        x\n      </span>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}