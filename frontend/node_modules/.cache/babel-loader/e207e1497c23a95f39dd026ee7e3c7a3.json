{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { MapillaryViewer } from \"react-mapillary\"; // const europe = [\n//   \"Albania\",\n//   \"Andorra\",\n//   \"Armenia\",\n//   \"Austria\",\n//   \"Azerbaijan\",\n//   \"Belarus\",\n//   \"Belgium\",\n//   \"Bosnia and Herzegovina\",\n//   \"Bosnia\",\n//   \"Herzegovina\",\n//   \"Bosnia-Herzegovina\",\n//   \"Bulgaria\",\n//   \"Croatia\",\n//   \"Cyprus\",\n//   \"Czechia\",\n//   \"Denmark\",\n//   \"Estonia\",\n//   \"Finland\",\n//   \"France\",\n//   \"Georgia\",\n//   \"Germany\",\n//   \"Greece\",\n//   \"Hungary\",\n//   \"Iceland\",\n//   \"Ireland\",\n//   \"Italy\",\n//   \"Kazakhstan\",\n//   \"Kosovo\",\n//   \"Latvia\",\n//   \"Liechtenstein\",\n//   \"Lithuania\",\n//   \"Luxembourg\",\n//   \"Malta\",\n//   \"Moldova\",\n//   \"Monaco\",\n//   \"Montenegro\",\n//   \"Netherlands\",\n//   \"North Macedonia\",\n//   \"Macedonia\",\n//   \"Norway\",\n//   \"Poland\",\n//   \"Portugal\",\n//   \"Romania\",\n//   \"Russia\",\n//   \"San Marino\",\n//   \"Serbia\",\n//   \"Slovakia\",\n//   \"Slovenia\",\n//   \"Spain\",\n//   \"Sweden\",\n//   \"Switzerland\",\n//   \"Turkey\",\n//   \"Ukraine\",\n//   \"United Kingdom\",\n//   \"UK\",\n//   \"Vatican City\",\n// ];\n// const asia = [\n//   \"Afghanistan\",\n//   \"Armenia\",\n//   \"Azerbaijan\",\n//   \"Bahrain\",\n//   \"Bangladesh\",\n//   \"Bhutan\",\n//   \"Brunei\",\n//   \"Cambodia\",\n//   \"China\",\n//   \"Cyprus\",\n//   \"Georgia\",\n//   \"India\",\n//   \"Indonesia\",\n//   \"Iran\",\n//   \"Iraq\",\n//   \"Israel\",\n//   \"Japan\",\n//   \"Jordan\",\n//   \"Kazakhstan\",\n//   \"Kuwait\",\n//   \"Kyrgyzstan\",\n//   \"Laos\",\n//   \"Lebanon\",\n//   \"Macao\",\n//   \"Macau\",\n//   \"Malaysia\",\n//   \"Maldives\",\n//   \"Mongolia\",\n//   \"Myanmar\",\n//   \"Burma\",\n//   \"Nepal\",\n//   \"North Korea\",\n//   \"Oman\",\n//   \"Pakistan\",\n//   \"Palestine\",\n//   \"Philippines\",\n//   \"Qatar\",\n//   \"Russia\",\n//   \"Saudi Arabia\",\n//   \"Singapore\",\n//   \"South Korea\",\n//   \"Sri Lanka\",\n//   \"Syria\",\n//   \"Taiwan\",\n//   \"Tajikistan\",\n//   \"Thailand\",\n//   \"Timor-Leste\",\n//   \"Turkey\",\n//   \"Turkmenistan\",\n//   \"United Arab Emirates\",\n//   \"UAE\",\n//   \"Uzbekistan\",\n//   \"Vietnam\",\n//   \"Yemen\",\n// ];\n// const africa = [\n//   \"Algeria\",\n//   \"Angola\",\n//   \"Benin\",\n//   \"Botswana\",\n//   \"Burkina Faso\",\n//   \"Burundi\",\n//   \"Cabo Verde\",\n//   \"Cameroon\",\n//   \"Central African Republic\",\n//   \"CAR\",\n//   \"Chad\",\n//   \"Comoros\",\n//   \"Congo, Democratic Republic of the\",\n//   \"Democratic Republic of the Congo\",\n//   \"Congo, Republic of the\",\n//   \"Republic of the Congo\",\n//   \"Cote d'Ivoire\",\n//   \"Djibouti\",\n//   \"Egypt\",\n//   \"Equatorial Guinea\",\n//   \"Eritrea\",\n//   \"Eswatini\",\n//   \"Swaziland\",\n//   \"Ethiopia\",\n//   \"Gabon\",\n//   \"Gambia\",\n//   \"Ghana\",\n//   \"Guinea\",\n//   \"Guinea-Bissau\",\n//   \"Kenya\",\n//   \"Lesotho\",\n//   \"Liberia\",\n//   \"Libya\",\n//   \"Madagascar\",\n//   \"Malawi\",\n//   \"Mali\",\n//   \"Mauritania\",\n//   \"Mauritius\",\n//   \"Morocco\",\n//   \"Mozambique\",\n//   \"Namibia\",\n//   \"Niger\",\n//   \"Nigeria\",\n//   \"Rwanda\",\n//   \"Sao Tome and Principe\",\n//   \"Sao Tome\",\n//   \"Principe\",\n//   \"Saint Thomas and Prince\",\n//   \"Senegal\",\n//   \"Seychelles\",\n//   \"Sierra Leone\",\n//   \"Somalia\",\n//   \"South Africa\",\n//   \"South Sudan\",\n//   \"Sudan\",\n//   \"Tanzania\",\n//   \"Togo\",\n//   \"Tunisia\",\n//   \"Uganda\",\n//   \"Zambia\",\n//   \"Zimbabwe\",\n// ];\n// const northAmerica = [\n//   \"Antigua and Barbuda\",\n//   \"Bahamas\",\n//   \"Barbados\",\n//   \"Belize\",\n//   \"Canada\",\n//   \"Costa Rica\",\n//   \"Cuba\",\n//   \"Dominica\",\n//   \"Dominican Republic\",\n//   \"El Salvador\",\n//   \"Grenada\",\n//   \"Guatemala\",\n//   \"Haiti\",\n//   \"Honduras\",\n//   \"Jamaica\",\n//   \"Mexico\",\n//   \"Nicaragua\",\n//   \"Panama\",\n//   \"Saint Kitts and Nevis\",\n//   \"Saint Lucia\",\n//   \"Saint Vincent and the Grenadines\",\n//   \"Trinidad and Tobago\",\n//   \"United States of America\",\n//   \"United States\",\n//   \"US\",\n//   \"USA\",\n//   \"Anguilla\",\n//   \"Aruba\",\n//   \"Bermuda\",\n//   \"Bonaire\",\n//   \"British Virgin Islands\",\n//   \"Cayman Islands\",\n//   \"Clipperton Island\",\n//   \"Curacao\",\n//   \"Greenland\",\n//   \"Guadeloupe\",\n//   \"Martinique\",\n//   \"Montserrat\",\n//   \"Navassa Island\",\n//   \"Puerto Rico\",\n//   \"Saba\",\n//   \"Saint Barthelemy\",\n//   \"Saint Martin\",\n//   \"Saint Pierre and Miquelon\",\n//   \"Sint Eustatius\",\n//   \"Sint Maarten\",\n//   \"Turks and Caicos Islands\",\n//   \"US Virgin Islands\",\n// ];\n// const southAmerica = [\n//   \"Argentina\",\n//   \"Bolivia\",\n//   \"Brazil\",\n//   \"Chile\",\n//   \"Colombia\",\n//   \"Ecuador\",\n//   \"Guyana\",\n//   \"Paraguay\",\n//   \"Peru\",\n//   \"Suriname\",\n//   \"Uruguay\",\n//   \"Venezuela\",\n//   \"Falkland Islands\",\n//   \"Falkland Islands (Islas Malvinas)\",\n//   \"Islas Malvinas\",\n//   \"French Guiana\",\n//   \"South Georgia and the South Sandwich Islands\",\n// ];\n// const oceania = [\n//   \"Australia\",\n//   \"Fiji\",\n//   \"Kiribati\",\n//   \"Marshall Islands\",\n//   \"Micronesia\",\n//   \"Nauru\",\n//   \"New Zealand\",\n//   \"Palau\",\n//   \"Papua New Guinea\",\n//   \"Samoa\",\n//   \"Solomon Islands\",\n//   \"Tonga\",\n//   \"Tuvalu\",\n//   \"Vanuatu\",\n//   \"American Samoa\",\n//   \"Cook Islands\",\n//   \"French Polynesia\",\n//   \"Guam\",\n//   \"New Caledonia\",\n//   \"Niue\",\n//   \"Norfolk Island\",\n//   \"Northern Mariana Islands\",\n//   \"Pitcairn Islands\",\n//   \"Tokelau\",\n//   \"Wake Island\",\n//   \"Wallis and Futuna\",\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map({\n  api,\n  address,\n  setAddress,\n  user\n}) {\n  _s();\n\n  // 085Gpl_xNxW1Lw2eeEG28w   fully works on my site (Berlin)\n  //okay so actually most of these kind of work by pressing space bar but only the one above seems to bring up arrows. And no way to go back.\n  // g8fuAu61idtDdrwdn_k      scroll (on mapillary but not on CT) but no arrows\n  // oregG3_m2QYvKMd4xpTayw   scroll AND arrows on mapillary but not showing arrows on CT\n  // bNtU6RIz3n6C9Hkvmr8EJL   type=\"feature\" - no scrolling at all. comes from /images\n  // ypJtyhRJ5goXQpRlxc2uiQ   same as 276\n  // FmP3BHhYKJVcoKYSIUkUFA   should work but no arrows....\n  // // //\n  // IlFyfyTOvBxFrskJKyOZ6Q   tokyo\n  // KGHbNmfZQ8z9BcWb1a_3lg   macau\n  // rwyMGYLiJIeHA1vQVdbzIg   india\n  // XPJZd38HsQTpdHPIFD0CHg   zurich\n  // S42Qzdt2b6Zw0iSs6imTXw   rome\n  // pVbOKwcGeh0hc3mYR7cQvg   paris\n  // yoqbCIEHbWB16feLHU0saA   bleecker street / manhattan\n  // Ml86dTM9LPynllM9pDl7ty   pueblo mexico\n  // rY7guF8KWnRuQ-GDKxuPTw   toronto\n  // 9VTHnaNzib-1zgdzaoLO7Q   lima peru\n  // vVtXCecu0MWJV5tC7qyJYQ   buenos aires argentina\n  // 5xpLICrGF5E0T9628G5xul   s√£o paulo, brazil\n  const [imgKey, setImgKey] = useState(\"\");\n  const [latlong, setLatlong] = useState({\n    lat: 0,\n    long: 0\n  }); // const [trigger, setTrigger] = useState(false);\n\n  const [stamp, setStamp] = useState(false);\n\n  function randCoord() {\n    // LATITUDE -90 to +90\n    let lat = (Math.random() * 90).toFixed(3);\n\n    if (Math.random() < 0.5) {\n      lat = lat * -1;\n    } // LONGITUDE -180 to + 180\n\n\n    let long = (Math.random() * 180).toFixed(3);\n\n    if (Math.random() < 0.5) {\n      long = long * -1;\n    }\n\n    return {\n      lat: parseFloat(lat),\n      long: parseFloat(long)\n    }; //why the heck would i need to do this??? long was a string and lat wasnt...\n  }\n\n  function makebbox() {\n    const coord = randCoord();\n    return {\n      minlong: coord.long - 4,\n      minlat: coord.lat - 2,\n      maxlong: coord.long + 4,\n      maxlat: coord.lat + 2\n    };\n  }\n\n  useEffect(() => {\n    setImgKey(\"KGHbNmfQ8z9BcWb1a_3lg\");\n  }, []); // useEffect(() => {\n  //   fetchSequences();\n  // }, []); //[trigger]\n\n  function fetchSequences() {\n    const bbox = makebbox();\n    fetch(`https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${bbox.minlat},${bbox.maxlong},${bbox.maxlat}&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`).then(r => r.json()).then(data => getApic(data));\n  }\n\n  function getApic(data) {\n    console.log(\"justfetchedsomestuff\", data); // if (data.features) {\n\n    if (data.features.length < 30) {\n      fetchSequences(); //setTrigger(true);\n    } else {\n      let feature = data.features[Math.floor(Math.random() * data.features.length)];\n      console.log(\"did this work? grabbing a random sample\", feature);\n      let count = 0;\n\n      while (feature.properties.coordinateProperties.image_keys.length < 30 && count < 3 * data.features.length) {\n        feature = data.features.sample;\n        count++;\n      }\n\n      if (count === 3 * data.features.length) {\n        fetchSequences(); // setTrigger(true);\n      } else {\n        console.log(feature.properties.coordinateProperties.image_keys[0]);\n        setLatlong({\n          lat: feature.geometry.coordinates[0],\n          long: feature.geometry.coordinates[1]\n        });\n        setImgKey(feature.properties.coordinateProperties.image_keys[0]);\n      }\n    } //  }\n\n  }\n\n  console.log(address);\n  useEffect(() => {\n    fetch(`${api}/city_info`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify(latlong)\n    }).then(r => r.json()).then(body => handleLocationData(body));\n  }, [imgKey]); // [latlong]\n\n  function handleLocationData(data) {\n    setAddress({\n      city: \"\",\n      state: \"\",\n      country: \"\",\n      continent: \"\"\n    });\n    console.log(\"does this look right to you?\", data, typeof data);\n\n    if (!data.error) {\n      data.forEach(d => {\n        if (d.types.includes(\"country\")) {\n          const countryName = d.long_name;\n\n          if (europe.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Europe\"\n            }));\n          } else if (asia.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Asia\"\n            }));\n          } else if (africa.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Africa\"\n            }));\n          } else if (northAmerica.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"North America\"\n            }));\n          } else if (southAmerica.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"South America\"\n            }));\n          } else if (oceania.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Oceania/Australia\"\n            }));\n          }\n        } else if (d.types.includes(\"locality\") || d.types.includes(\"administrative_area_level_1\")) {\n          const stateName = d.long_name;\n          setAddress(address => ({ ...address,\n            state: stateName\n          }));\n        } else if (d.types.includes(\"sublocality\") || d.types.includes(\"administrative_area_level_2\")) {\n          const cityName = d.long_name;\n          setAddress(address => ({ ...address,\n            city: cityName\n          }));\n        }\n      });\n      console.log(\"finished finding geography info\");\n      setStamp(!stamp);\n    }\n  }\n\n  useEffect(() => {\n    fetch(`${api}/stamp/${user.id}`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify(address)\n    }).then(r => r.json()).then(console.log);\n  }, [stamp]); // const [clientID, setClientID] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(`${api}/clientID`)\n  //     .then((r) => {\n  //       console.log(\"response before json()\", r);\n  //       r.json();\n  //     })\n  //     .then((r) => {\n  //       console.log(\"client id call response\", r);\n  //       setClientID(r);\n  //     });\n  // }, []);\n  //   useEffect(() => {\n  //     fetch(\n  //       \"https://a.mapillary.com/v3/images?client_id=MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n  //     )\n  //       .then((r) => r.json())\n  //       .then((j) => setImgKey(j.features[10].properties.key));\n  //   }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\" //   role=\"button\"\n    //   tabIndex=\"-1\"\n    ,\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapillaryViewer, {\n      clientId: \"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\",\n      imageKey: imgKey,\n      filter: [\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"] // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n      // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n      ,\n      onNodeChanged: node => {\n        console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n        setLatlong({\n          lat: node.latLon.lat,\n          long: node.latLon.lon\n        });\n      } // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"28sEeyQtwYRMLdFGNeJZn7VJA6M=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js"],"names":["useEffect","useState","React","MapillaryViewer","Map","api","address","setAddress","user","imgKey","setImgKey","latlong","setLatlong","lat","long","stamp","setStamp","randCoord","Math","random","toFixed","parseFloat","makebbox","coord","minlong","minlat","maxlong","maxlat","fetchSequences","bbox","fetch","then","r","json","data","getApic","console","log","features","length","feature","floor","count","properties","coordinateProperties","image_keys","sample","geometry","coordinates","method","headers","accept","body","JSON","stringify","handleLocationData","city","state","country","continent","error","forEach","d","types","includes","countryName","long_name","europe","asia","africa","northAmerica","southAmerica","oceania","stateName","cityName","id","width","height","node","latLon","lon"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { MapillaryViewer } from \"react-mapillary\";\n// const europe = [\n//   \"Albania\",\n//   \"Andorra\",\n//   \"Armenia\",\n//   \"Austria\",\n//   \"Azerbaijan\",\n//   \"Belarus\",\n//   \"Belgium\",\n//   \"Bosnia and Herzegovina\",\n//   \"Bosnia\",\n//   \"Herzegovina\",\n//   \"Bosnia-Herzegovina\",\n//   \"Bulgaria\",\n//   \"Croatia\",\n//   \"Cyprus\",\n//   \"Czechia\",\n//   \"Denmark\",\n//   \"Estonia\",\n//   \"Finland\",\n//   \"France\",\n//   \"Georgia\",\n//   \"Germany\",\n//   \"Greece\",\n//   \"Hungary\",\n//   \"Iceland\",\n//   \"Ireland\",\n//   \"Italy\",\n//   \"Kazakhstan\",\n//   \"Kosovo\",\n//   \"Latvia\",\n//   \"Liechtenstein\",\n//   \"Lithuania\",\n//   \"Luxembourg\",\n//   \"Malta\",\n//   \"Moldova\",\n//   \"Monaco\",\n//   \"Montenegro\",\n//   \"Netherlands\",\n//   \"North Macedonia\",\n//   \"Macedonia\",\n//   \"Norway\",\n//   \"Poland\",\n//   \"Portugal\",\n//   \"Romania\",\n//   \"Russia\",\n//   \"San Marino\",\n//   \"Serbia\",\n//   \"Slovakia\",\n//   \"Slovenia\",\n//   \"Spain\",\n//   \"Sweden\",\n//   \"Switzerland\",\n//   \"Turkey\",\n//   \"Ukraine\",\n//   \"United Kingdom\",\n//   \"UK\",\n//   \"Vatican City\",\n// ];\n// const asia = [\n//   \"Afghanistan\",\n//   \"Armenia\",\n//   \"Azerbaijan\",\n//   \"Bahrain\",\n//   \"Bangladesh\",\n//   \"Bhutan\",\n//   \"Brunei\",\n//   \"Cambodia\",\n//   \"China\",\n//   \"Cyprus\",\n//   \"Georgia\",\n//   \"India\",\n//   \"Indonesia\",\n//   \"Iran\",\n//   \"Iraq\",\n//   \"Israel\",\n//   \"Japan\",\n//   \"Jordan\",\n//   \"Kazakhstan\",\n//   \"Kuwait\",\n//   \"Kyrgyzstan\",\n//   \"Laos\",\n//   \"Lebanon\",\n//   \"Macao\",\n//   \"Macau\",\n//   \"Malaysia\",\n//   \"Maldives\",\n//   \"Mongolia\",\n//   \"Myanmar\",\n//   \"Burma\",\n//   \"Nepal\",\n//   \"North Korea\",\n//   \"Oman\",\n//   \"Pakistan\",\n//   \"Palestine\",\n//   \"Philippines\",\n//   \"Qatar\",\n//   \"Russia\",\n//   \"Saudi Arabia\",\n//   \"Singapore\",\n//   \"South Korea\",\n//   \"Sri Lanka\",\n//   \"Syria\",\n//   \"Taiwan\",\n//   \"Tajikistan\",\n//   \"Thailand\",\n//   \"Timor-Leste\",\n//   \"Turkey\",\n//   \"Turkmenistan\",\n//   \"United Arab Emirates\",\n//   \"UAE\",\n//   \"Uzbekistan\",\n//   \"Vietnam\",\n//   \"Yemen\",\n// ];\n// const africa = [\n//   \"Algeria\",\n//   \"Angola\",\n//   \"Benin\",\n//   \"Botswana\",\n//   \"Burkina Faso\",\n//   \"Burundi\",\n//   \"Cabo Verde\",\n//   \"Cameroon\",\n//   \"Central African Republic\",\n//   \"CAR\",\n//   \"Chad\",\n//   \"Comoros\",\n//   \"Congo, Democratic Republic of the\",\n//   \"Democratic Republic of the Congo\",\n//   \"Congo, Republic of the\",\n//   \"Republic of the Congo\",\n//   \"Cote d'Ivoire\",\n//   \"Djibouti\",\n//   \"Egypt\",\n//   \"Equatorial Guinea\",\n//   \"Eritrea\",\n//   \"Eswatini\",\n//   \"Swaziland\",\n//   \"Ethiopia\",\n//   \"Gabon\",\n//   \"Gambia\",\n//   \"Ghana\",\n//   \"Guinea\",\n//   \"Guinea-Bissau\",\n//   \"Kenya\",\n//   \"Lesotho\",\n//   \"Liberia\",\n//   \"Libya\",\n//   \"Madagascar\",\n//   \"Malawi\",\n//   \"Mali\",\n//   \"Mauritania\",\n//   \"Mauritius\",\n//   \"Morocco\",\n//   \"Mozambique\",\n//   \"Namibia\",\n//   \"Niger\",\n//   \"Nigeria\",\n//   \"Rwanda\",\n//   \"Sao Tome and Principe\",\n//   \"Sao Tome\",\n//   \"Principe\",\n//   \"Saint Thomas and Prince\",\n//   \"Senegal\",\n//   \"Seychelles\",\n//   \"Sierra Leone\",\n//   \"Somalia\",\n//   \"South Africa\",\n//   \"South Sudan\",\n//   \"Sudan\",\n//   \"Tanzania\",\n//   \"Togo\",\n//   \"Tunisia\",\n//   \"Uganda\",\n//   \"Zambia\",\n//   \"Zimbabwe\",\n// ];\n// const northAmerica = [\n//   \"Antigua and Barbuda\",\n//   \"Bahamas\",\n//   \"Barbados\",\n//   \"Belize\",\n//   \"Canada\",\n//   \"Costa Rica\",\n//   \"Cuba\",\n//   \"Dominica\",\n//   \"Dominican Republic\",\n//   \"El Salvador\",\n//   \"Grenada\",\n//   \"Guatemala\",\n//   \"Haiti\",\n//   \"Honduras\",\n//   \"Jamaica\",\n//   \"Mexico\",\n//   \"Nicaragua\",\n//   \"Panama\",\n//   \"Saint Kitts and Nevis\",\n//   \"Saint Lucia\",\n//   \"Saint Vincent and the Grenadines\",\n//   \"Trinidad and Tobago\",\n//   \"United States of America\",\n//   \"United States\",\n//   \"US\",\n//   \"USA\",\n//   \"Anguilla\",\n//   \"Aruba\",\n//   \"Bermuda\",\n//   \"Bonaire\",\n//   \"British Virgin Islands\",\n//   \"Cayman Islands\",\n//   \"Clipperton Island\",\n//   \"Curacao\",\n//   \"Greenland\",\n//   \"Guadeloupe\",\n//   \"Martinique\",\n//   \"Montserrat\",\n//   \"Navassa Island\",\n//   \"Puerto Rico\",\n//   \"Saba\",\n//   \"Saint Barthelemy\",\n//   \"Saint Martin\",\n//   \"Saint Pierre and Miquelon\",\n//   \"Sint Eustatius\",\n//   \"Sint Maarten\",\n//   \"Turks and Caicos Islands\",\n//   \"US Virgin Islands\",\n// ];\n// const southAmerica = [\n//   \"Argentina\",\n//   \"Bolivia\",\n//   \"Brazil\",\n//   \"Chile\",\n//   \"Colombia\",\n//   \"Ecuador\",\n//   \"Guyana\",\n//   \"Paraguay\",\n//   \"Peru\",\n//   \"Suriname\",\n//   \"Uruguay\",\n//   \"Venezuela\",\n//   \"Falkland Islands\",\n//   \"Falkland Islands (Islas Malvinas)\",\n//   \"Islas Malvinas\",\n//   \"French Guiana\",\n//   \"South Georgia and the South Sandwich Islands\",\n// ];\n// const oceania = [\n//   \"Australia\",\n//   \"Fiji\",\n//   \"Kiribati\",\n//   \"Marshall Islands\",\n//   \"Micronesia\",\n//   \"Nauru\",\n//   \"New Zealand\",\n//   \"Palau\",\n//   \"Papua New Guinea\",\n//   \"Samoa\",\n//   \"Solomon Islands\",\n//   \"Tonga\",\n//   \"Tuvalu\",\n//   \"Vanuatu\",\n//   \"American Samoa\",\n//   \"Cook Islands\",\n//   \"French Polynesia\",\n//   \"Guam\",\n//   \"New Caledonia\",\n//   \"Niue\",\n//   \"Norfolk Island\",\n//   \"Northern Mariana Islands\",\n//   \"Pitcairn Islands\",\n//   \"Tokelau\",\n//   \"Wake Island\",\n//   \"Wallis and Futuna\",\n// ];\n\nfunction Map({ api, address, setAddress, user }) {\n  // 085Gpl_xNxW1Lw2eeEG28w   fully works on my site (Berlin)\n  //okay so actually most of these kind of work by pressing space bar but only the one above seems to bring up arrows. And no way to go back.\n  // g8fuAu61idtDdrwdn_k      scroll (on mapillary but not on CT) but no arrows\n  // oregG3_m2QYvKMd4xpTayw   scroll AND arrows on mapillary but not showing arrows on CT\n  // bNtU6RIz3n6C9Hkvmr8EJL   type=\"feature\" - no scrolling at all. comes from /images\n  // ypJtyhRJ5goXQpRlxc2uiQ   same as 276\n  // FmP3BHhYKJVcoKYSIUkUFA   should work but no arrows....\n  // // //\n  // IlFyfyTOvBxFrskJKyOZ6Q   tokyo\n  // KGHbNmfZQ8z9BcWb1a_3lg   macau\n  // rwyMGYLiJIeHA1vQVdbzIg   india\n  // XPJZd38HsQTpdHPIFD0CHg   zurich\n  // S42Qzdt2b6Zw0iSs6imTXw   rome\n  // pVbOKwcGeh0hc3mYR7cQvg   paris\n  // yoqbCIEHbWB16feLHU0saA   bleecker street / manhattan\n  // Ml86dTM9LPynllM9pDl7ty   pueblo mexico\n  // rY7guF8KWnRuQ-GDKxuPTw   toronto\n  // 9VTHnaNzib-1zgdzaoLO7Q   lima peru\n  // vVtXCecu0MWJV5tC7qyJYQ   buenos aires argentina\n  // 5xpLICrGF5E0T9628G5xul   s√£o paulo, brazil\n  const [imgKey, setImgKey] = useState(\"\");\n  const [latlong, setLatlong] = useState({ lat: 0, long: 0 });\n  // const [trigger, setTrigger] = useState(false);\n  const [stamp, setStamp] = useState(false);\n\n  function randCoord() {\n    // LATITUDE -90 to +90\n    let lat = (Math.random() * 90).toFixed(3);\n    if (Math.random() < 0.5) {\n      lat = lat * -1;\n    }\n    // LONGITUDE -180 to + 180\n    let long = (Math.random() * 180).toFixed(3);\n    if (Math.random() < 0.5) {\n      long = long * -1;\n    }\n    return { lat: parseFloat(lat), long: parseFloat(long) }; //why the heck would i need to do this??? long was a string and lat wasnt...\n  }\n  function makebbox() {\n    const coord = randCoord();\n    return {\n      minlong: coord.long - 4,\n      minlat: coord.lat - 2,\n      maxlong: coord.long + 4,\n      maxlat: coord.lat + 2,\n    };\n  }\n\n  useEffect(() => {\n    setImgKey(\"KGHbNmfQ8z9BcWb1a_3lg\");\n  }, []);\n\n  // useEffect(() => {\n  //   fetchSequences();\n  // }, []); //[trigger]\n\n  function fetchSequences() {\n    const bbox = makebbox();\n    fetch(\n      `https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${\n        bbox.minlat\n      },${bbox.maxlong},${\n        bbox.maxlat\n      }&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`\n    )\n      .then((r) => r.json())\n      .then((data) => getApic(data));\n  }\n\n  function getApic(data) {\n    console.log(\"justfetchedsomestuff\", data);\n    // if (data.features) {\n    if (data.features.length < 30) {\n      fetchSequences(); //setTrigger(true);\n    } else {\n      let feature =\n        data.features[Math.floor(Math.random() * data.features.length)];\n      console.log(\"did this work? grabbing a random sample\", feature);\n      let count = 0;\n      while (\n        feature.properties.coordinateProperties.image_keys.length < 30 &&\n        count < 3 * data.features.length\n      ) {\n        feature = data.features.sample;\n        count++;\n      }\n      if (count === 3 * data.features.length) {\n        fetchSequences(); // setTrigger(true);\n      } else {\n        console.log(feature.properties.coordinateProperties.image_keys[0]);\n        setLatlong({\n          lat: feature.geometry.coordinates[0],\n          long: feature.geometry.coordinates[1],\n        });\n        setImgKey(feature.properties.coordinateProperties.image_keys[0]);\n      }\n    }\n    //  }\n  }\n\n  console.log(address);\n  useEffect(() => {\n    fetch(`${api}/city_info`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\",\n      },\n      body: JSON.stringify(latlong),\n    })\n      .then((r) => r.json())\n      .then((body) => handleLocationData(body));\n  }, [imgKey]); // [latlong]\n\n  function handleLocationData(data) {\n    setAddress({\n      city: \"\",\n      state: \"\",\n      country: \"\",\n      continent: \"\",\n    });\n    console.log(\"does this look right to you?\", data, typeof data);\n    if (!data.error) {\n      data.forEach((d) => {\n        if (d.types.includes(\"country\")) {\n          const countryName = d.long_name;\n          if (europe.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Europe\",\n            }));\n          } else if (asia.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Asia\",\n            }));\n          } else if (africa.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Africa\",\n            }));\n          } else if (northAmerica.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"North America\",\n            }));\n          } else if (southAmerica.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"South America\",\n            }));\n          } else if (oceania.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Oceania/Australia\",\n            }));\n          }\n        } else if (\n          d.types.includes(\"locality\") ||\n          d.types.includes(\"administrative_area_level_1\")\n        ) {\n          const stateName = d.long_name;\n          setAddress((address) => ({ ...address, state: stateName }));\n        } else if (\n          d.types.includes(\"sublocality\") ||\n          d.types.includes(\"administrative_area_level_2\")\n        ) {\n          const cityName = d.long_name;\n          setAddress((address) => ({ ...address, city: cityName }));\n        }\n      });\n      console.log(\"finished finding geography info\");\n      setStamp(!stamp);\n    }\n  }\n\n  useEffect(() => {\n    fetch(`${api}/stamp/${user.id}`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\",\n      },\n      body: JSON.stringify(address),\n    })\n      .then((r) => r.json())\n      .then(console.log);\n  }, [stamp]);\n\n  // const [clientID, setClientID] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(`${api}/clientID`)\n  //     .then((r) => {\n  //       console.log(\"response before json()\", r);\n  //       r.json();\n  //     })\n  //     .then((r) => {\n  //       console.log(\"client id call response\", r);\n  //       setClientID(r);\n  //     });\n  // }, []);\n\n  //   useEffect(() => {\n  //     fetch(\n  //       \"https://a.mapillary.com/v3/images?client_id=MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n  //     )\n  //       .then((r) => r.json())\n  //       .then((j) => setImgKey(j.features[10].properties.key));\n  //   }, []);\n\n  return (\n    <div\n      id=\"map-container\"\n      //   role=\"button\"\n      //   tabIndex=\"-1\"\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      {/* <h2>\n        Coords: {latlong.lat}¬∫N, {latlong.long}¬∫E\n      </h2> */}\n      <MapillaryViewer\n        clientId=\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n        imageKey={imgKey}\n        filter={[\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"]}\n        // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n        // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n        onNodeChanged={(node) => {\n          console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n          setLatlong({ lat: node.latLon.lat, long: node.latLon.lon });\n        }}\n        // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n      />\n    </div>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}