{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport React from \"react\"; // import * as Mapillary from \"mapillary-js\";\n\nimport { MapillaryViewer } from \"react-mapillary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst europe = [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\", \"Belarus\", \"Belgium\", \"Bosnia and Herzegovina\", \"Bosnia\", \"Herzegovina\", \"Bosnia-Herzegovina\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Czechia\", \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Hungary\", \"Iceland\", \"Ireland\", \"Italy\", \"Kazakhstan\", \"Kosovo\", \"Latvia\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Malta\", \"Moldova\", \"Monaco\", \"Montenegro\", \"Netherlands\", \"North Macedonia\", \"Macedonia\", \"Norway\", \"Poland\", \"Portugal\", \"Romania\", \"Russia\", \"San Marino\", \"Serbia\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\", \"Turkey\", \"Ukraine\", \"United Kingdom\", \"UK\", \"Vatican City\"];\nconst asia = [\"Afghanistan\", \"Armenia\", \"Azerbaijan\", \"Bahrain\", \"Bangladesh\", \"Bhutan\", \"Brunei\", \"Cambodia\", \"China\", \"Cyprus\", \"Georgia\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Israel\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Lebanon\", \"Malaysia\", \"Maldives\", \"Mongolia\", \"Myanmar\", \"Burma\", \"Nepal\", \"North Korea\", \"Oman\", \"Pakistan\", \"Palestine\", \"Philippines\", \"Qatar\", \"Russia\", \"Saudi Arabia\", \"Singapore\", \"South Korea\", \"Sri Lanka\", \"Syria\", \"Taiwan\", \"Tajikistan\", \"Thailand\", \"Timor-Leste\", \"Turkey\", \"Turkmenistan\", \"United Arab Emirates\", \"UAE\", \"Uzbekistan\", \"Vietnam\", \"Yemen\"];\nconst africa = [\"Algeria\", \"Angola\", \"Benin\", \"Botswana\", \"Burkina Faso\", \"Burundi\", \"Cabo Verde\", \"Cameroon\", \"Central African Republic\", \"CAR\", \"Chad\", \"Comoros\", \"Congo, Democratic Republic of the\", \"Democratic Republic of the Congo\", \"Congo, Republic of the\", \"Republic of the Congo\", \"Cote d'Ivoire\", \"Djibouti\", \"Egypt\", \"Equatorial Guinea\", \"Eritrea\", \"Eswatini\", \"Swaziland\", \"Ethiopia\", \"Gabon\", \"Gambia\", \"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Kenya\", \"Lesotho\", \"Liberia\", \"Libya\", \"Madagascar\", \"Malawi\", \"Mali\", \"Mauritania\", \"Mauritius\", \"Morocco\", \"Mozambique\", \"Namibia\", \"Niger\", \"Nigeria\", \"Rwanda\", \"Sao Tome and Principe\", \"Sao Tome\", \"Principe\", \"Saint Thomas and Prince\", \"Senegal\", \"Seychelles\", \"Sierra Leone\", \"Somalia\", \"South Africa\", \"South Sudan\", \"Sudan\", \"Tanzania\", \"Togo\", \"Tunisia\", \"Uganda\", \"Zambia\", \"Zimbabwe\"];\nconst northAmerica = [\"Antigua and Barbuda\", \"Bahamas\", \"Barbados\", \"Belize\", \"Canada\", \"Costa Rica\", \"Cuba\", \"Dominica\", \"Dominican Republic\", \"El Salvador\", \"Grenada\", \"Guatemala\", \"Haiti\", \"Honduras\", \"Jamaica\", \"Mexico\", \"Nicaragua\", \"Panama\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \"Saint Vincent and the Grenadines\", \"Trinidad and Tobago\", \"United States of America (USA)\", \"Anguilla (UK)\", \"Aruba (Netherlands)\", \"Bermuda (UK)\", \"Bonaire (Netherlands)\", \"British Virgin Islands (UK)\", \"Cayman Islands (UK)\", \"Clipperton Island (France)\", \"Curacao (Netherlands)\", \"Greenland (Denmark)\", \"Guadeloupe (France)\", \"Martinique (France)\", \"Montserrat (UK)\", \"Navassa Island (USA)\", \"Puerto Rico (USA)\", \"Saba (Netherlands)\", \"Saint Barthelemy (France)\", \"Saint Martin (France)\", \"Saint Pierre and Miquelon (France)\", \"Sint Eustatius (Netherlands)\", \"Sint Maarten (Netherlands)\", \"Turks and Caicos Islands (UK)\", \"US Virgin Islands (USA)\"];\nconst southAmerica = [\"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"Guyana\", \"Paraguay\", \"Peru\", \"Suriname\", \"Uruguay\", \"Venezuela\", \"Falkland Islands (UK)\", \"French Guiana (France)\", \"South Georgia and the South Sandwich Islands (UK)\"];\nconst oceania = [\"Australia\", \"Fiji\", \"Kiribati\", \"Marshall Islands\", \"Micronesia\", \"Nauru\", \"New Zealand\", \"Palau\", \"Papua New Guinea\", \"Samoa\", \"Solomon Islands\", \"Tonga\", \"Tuvalu\", \"Vanuatu\", \"American Samoa (USA)\", \"Cook Islands (New Zealand)\", \"French Polynesia (France)\", \"Guam (USA)\", \"New Caledonia (France)\", \"Niue (New Zealand)\", \"Norfolk Island (Australia)\", \"Northern Mariana Islands (USA)\", \"Pitcairn Islands (UK)\", \"Tokelau (New Zealand)\", \"Wake Island (USA)\", \"Wallis and Futuna (France)\"];\n\nfunction Map({\n  api,\n  address,\n  setAddress\n}) {\n  _s();\n\n  // 085Gpl_xNxW1Lw2eeEG28w   works on my site\n  // g8fuAu61idtDdrwdn_k      scroll (on mapillary but not on CT) but no arrows\n  // oregG3_m2QYvKMd4xpTayw   scroll AND arrows on mapillary but not showing arrows on CT\n  // bNtU6RIz3n6C9Hkvmr8EJL   type=\"feature\" - no scrolling at all. comes from /images\n  // ypJtyhRJ5goXQpRlxc2uiQ   same as 276\n  // FmP3BHhYKJVcoKYSIUkUFA   should work but no arrows....\n  const [imgKey, setImgKey] = useState(\"SkWuGrhpMiudoOB_Syk-3w\");\n  const [latlong, setLatlong] = useState({\n    lat: 0,\n    long: 0\n  });\n\n  function randCoord() {\n    // LATITUDE -90 to +90\n    let lat = (Math.random() * 90).toFixed(3);\n\n    if (Math.random() < 0.5) {\n      lat = lat * -1;\n    } // LONGITUDE -180 to + 180\n\n\n    let long = (Math.random() * 180).toFixed(3);\n\n    if (Math.random() < 0.5) {\n      long = long * -1;\n    }\n\n    return {\n      lat: parseFloat(lat),\n      long: parseFloat(long)\n    }; //why the heck would i need to do this??? long was a string and lat wasnt\n  }\n\n  function makebbox() {\n    const coord = randCoord();\n    console.log(\"makin a box!\", coord);\n    return {\n      minlong: coord.long - 4,\n      minlat: coord.lat - 2,\n      maxlong: coord.long + 4,\n      maxlat: coord.lat + 2\n    };\n  }\n\n  useEffect(() => {\n    const bbox = makebbox();\n    fetch(`https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${bbox.minlat},${bbox.maxlong},${bbox.maxlat}&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`).then(r => r.json()).then(data => console.log(\"justfetchedsomestuff\", data));\n  }, []);\n  console.log(address);\n  useEffect(() => {\n    fetch(`${api}/city_info`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify(latlong)\n    }).then(r => r.json()).then(body => handleLocationData(body));\n  }, []); // [latlong]\n\n  function handleLocationData(data) {\n    console.log(data, typeof data);\n\n    if (!data.error) {\n      data.forEach(d => {\n        if (d.types.includes(\"country\")) {\n          const countryName = d.long_name;\n\n          if (europe.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Europe\"\n            }));\n          } else if (asia.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Asia\"\n            }));\n          } else if (africa.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Africa\"\n            }));\n          } else if (northAmerica.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"North America\"\n            }));\n          } else if (southAmerica.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"South America\"\n            }));\n          } else if (oceania.includes(countryName)) {\n            setAddress(address => ({ ...address,\n              country: countryName,\n              continent: \"Oceania/Australia\"\n            }));\n          }\n        } else if (d.types.includes(\"locality\")) {\n          const stateName = d.long_name;\n          setAddress(address => ({ ...address,\n            state: stateName\n          }));\n        } else if (d.types.includes(\"sublocality\")) {\n          const cityName = d.long_name;\n          setAddress(address => ({ ...address,\n            city: cityName\n          }));\n        }\n      });\n    }\n  } // const [clientID, setClientID] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(`${api}/clientID`)\n  //     .then((r) => {\n  //       console.log(\"response before json()\", r);\n  //       r.json();\n  //     })\n  //     .then((r) => {\n  //       console.log(\"client id call response\", r);\n  //       setClientID(r);\n  //     });\n  // }, []);\n  //   useEffect(() => {\n  //     fetch(\n  //       \"https://a.mapillary.com/v3/images?client_id=MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n  //     )\n  //       .then((r) => r.json())\n  //       .then((j) => setImgKey(j.features[10].properties.key));\n  //   }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\" //   role=\"button\"\n    //   tabIndex=\"-1\"\n    ,\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapillaryViewer, {\n      clientId: \"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\",\n      imageKey: imgKey,\n      filter: [\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"] // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n      // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n      ,\n      onNodeChanged: node => {\n        console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n        setLatlong({\n          lat: node.latLon.lat,\n          long: node.latLon.lon\n        });\n      } // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"jeuyhU5tsZBNEETT9mS7864rgOg=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js"],"names":["useEffect","useState","React","MapillaryViewer","europe","asia","africa","northAmerica","southAmerica","oceania","Map","api","address","setAddress","imgKey","setImgKey","latlong","setLatlong","lat","long","randCoord","Math","random","toFixed","parseFloat","makebbox","coord","console","log","minlong","minlat","maxlong","maxlat","bbox","fetch","then","r","json","data","method","headers","accept","body","JSON","stringify","handleLocationData","error","forEach","d","types","includes","countryName","long_name","country","continent","stateName","state","cityName","city","width","height","node","latLon","lon"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport React from \"react\";\n// import * as Mapillary from \"mapillary-js\";\nimport { MapillaryViewer } from \"react-mapillary\";\nconst europe = [\n  \"Albania\",\n  \"Andorra\",\n  \"Armenia\",\n  \"Austria\",\n  \"Azerbaijan\",\n  \"Belarus\",\n  \"Belgium\",\n  \"Bosnia and Herzegovina\",\n  \"Bosnia\",\n  \"Herzegovina\",\n  \"Bosnia-Herzegovina\",\n  \"Bulgaria\",\n  \"Croatia\",\n  \"Cyprus\",\n  \"Czechia\",\n  \"Denmark\",\n  \"Estonia\",\n  \"Finland\",\n  \"France\",\n  \"Georgia\",\n  \"Germany\",\n  \"Greece\",\n  \"Hungary\",\n  \"Iceland\",\n  \"Ireland\",\n  \"Italy\",\n  \"Kazakhstan\",\n  \"Kosovo\",\n  \"Latvia\",\n  \"Liechtenstein\",\n  \"Lithuania\",\n  \"Luxembourg\",\n  \"Malta\",\n  \"Moldova\",\n  \"Monaco\",\n  \"Montenegro\",\n  \"Netherlands\",\n  \"North Macedonia\",\n  \"Macedonia\",\n  \"Norway\",\n  \"Poland\",\n  \"Portugal\",\n  \"Romania\",\n  \"Russia\",\n  \"San Marino\",\n  \"Serbia\",\n  \"Slovakia\",\n  \"Slovenia\",\n  \"Spain\",\n  \"Sweden\",\n  \"Switzerland\",\n  \"Turkey\",\n  \"Ukraine\",\n  \"United Kingdom\",\n  \"UK\",\n  \"Vatican City\",\n];\nconst asia = [\n  \"Afghanistan\",\n  \"Armenia\",\n  \"Azerbaijan\",\n  \"Bahrain\",\n  \"Bangladesh\",\n  \"Bhutan\",\n  \"Brunei\",\n  \"Cambodia\",\n  \"China\",\n  \"Cyprus\",\n  \"Georgia\",\n  \"India\",\n  \"Indonesia\",\n  \"Iran\",\n  \"Iraq\",\n  \"Israel\",\n  \"Japan\",\n  \"Jordan\",\n  \"Kazakhstan\",\n  \"Kuwait\",\n  \"Kyrgyzstan\",\n  \"Laos\",\n  \"Lebanon\",\n  \"Malaysia\",\n  \"Maldives\",\n  \"Mongolia\",\n  \"Myanmar\",\n  \"Burma\",\n  \"Nepal\",\n  \"North Korea\",\n  \"Oman\",\n  \"Pakistan\",\n  \"Palestine\",\n  \"Philippines\",\n  \"Qatar\",\n  \"Russia\",\n  \"Saudi Arabia\",\n  \"Singapore\",\n  \"South Korea\",\n  \"Sri Lanka\",\n  \"Syria\",\n  \"Taiwan\",\n  \"Tajikistan\",\n  \"Thailand\",\n  \"Timor-Leste\",\n  \"Turkey\",\n  \"Turkmenistan\",\n  \"United Arab Emirates\",\n  \"UAE\",\n  \"Uzbekistan\",\n  \"Vietnam\",\n  \"Yemen\",\n];\nconst africa = [\n  \"Algeria\",\n  \"Angola\",\n  \"Benin\",\n  \"Botswana\",\n  \"Burkina Faso\",\n  \"Burundi\",\n  \"Cabo Verde\",\n  \"Cameroon\",\n  \"Central African Republic\",\n  \"CAR\",\n  \"Chad\",\n  \"Comoros\",\n  \"Congo, Democratic Republic of the\",\n  \"Democratic Republic of the Congo\",\n  \"Congo, Republic of the\",\n  \"Republic of the Congo\",\n  \"Cote d'Ivoire\",\n  \"Djibouti\",\n  \"Egypt\",\n  \"Equatorial Guinea\",\n  \"Eritrea\",\n  \"Eswatini\",\n  \"Swaziland\",\n  \"Ethiopia\",\n  \"Gabon\",\n  \"Gambia\",\n  \"Ghana\",\n  \"Guinea\",\n  \"Guinea-Bissau\",\n  \"Kenya\",\n  \"Lesotho\",\n  \"Liberia\",\n  \"Libya\",\n  \"Madagascar\",\n  \"Malawi\",\n  \"Mali\",\n  \"Mauritania\",\n  \"Mauritius\",\n  \"Morocco\",\n  \"Mozambique\",\n  \"Namibia\",\n  \"Niger\",\n  \"Nigeria\",\n  \"Rwanda\",\n  \"Sao Tome and Principe\",\n  \"Sao Tome\",\n  \"Principe\",\n  \"Saint Thomas and Prince\",\n  \"Senegal\",\n  \"Seychelles\",\n  \"Sierra Leone\",\n  \"Somalia\",\n  \"South Africa\",\n  \"South Sudan\",\n  \"Sudan\",\n  \"Tanzania\",\n  \"Togo\",\n  \"Tunisia\",\n  \"Uganda\",\n  \"Zambia\",\n  \"Zimbabwe\",\n];\nconst northAmerica = [\n  \"Antigua and Barbuda\",\n  \"Bahamas\",\n  \"Barbados\",\n  \"Belize\",\n  \"Canada\",\n  \"Costa Rica\",\n  \"Cuba\",\n  \"Dominica\",\n  \"Dominican Republic\",\n  \"El Salvador\",\n  \"Grenada\",\n  \"Guatemala\",\n  \"Haiti\",\n  \"Honduras\",\n  \"Jamaica\",\n  \"Mexico\",\n  \"Nicaragua\",\n  \"Panama\",\n  \"Saint Kitts and Nevis\",\n  \"Saint Lucia\",\n  \"Saint Vincent and the Grenadines\",\n  \"Trinidad and Tobago\",\n  \"United States of America (USA)\",\n  \"Anguilla (UK)\",\n  \"Aruba (Netherlands)\",\n  \"Bermuda (UK)\",\n  \"Bonaire (Netherlands)\",\n  \"British Virgin Islands (UK)\",\n  \"Cayman Islands (UK)\",\n  \"Clipperton Island (France)\",\n  \"Curacao (Netherlands)\",\n  \"Greenland (Denmark)\",\n  \"Guadeloupe (France)\",\n  \"Martinique (France)\",\n  \"Montserrat (UK)\",\n  \"Navassa Island (USA)\",\n  \"Puerto Rico (USA)\",\n  \"Saba (Netherlands)\",\n  \"Saint Barthelemy (France)\",\n  \"Saint Martin (France)\",\n  \"Saint Pierre and Miquelon (France)\",\n  \"Sint Eustatius (Netherlands)\",\n  \"Sint Maarten (Netherlands)\",\n  \"Turks and Caicos Islands (UK)\",\n  \"US Virgin Islands (USA)\",\n];\nconst southAmerica = [\n  \"Argentina\",\n  \"Bolivia\",\n  \"Brazil\",\n  \"Chile\",\n  \"Colombia\",\n  \"Ecuador\",\n  \"Guyana\",\n  \"Paraguay\",\n  \"Peru\",\n  \"Suriname\",\n  \"Uruguay\",\n  \"Venezuela\",\n  \"Falkland Islands (UK)\",\n  \"French Guiana (France)\",\n  \"South Georgia and the South Sandwich Islands (UK)\",\n];\nconst oceania = [\n  \"Australia\",\n  \"Fiji\",\n  \"Kiribati\",\n  \"Marshall Islands\",\n  \"Micronesia\",\n  \"Nauru\",\n  \"New Zealand\",\n  \"Palau\",\n  \"Papua New Guinea\",\n  \"Samoa\",\n  \"Solomon Islands\",\n  \"Tonga\",\n  \"Tuvalu\",\n  \"Vanuatu\",\n  \"American Samoa (USA)\",\n  \"Cook Islands (New Zealand)\",\n  \"French Polynesia (France)\",\n  \"Guam (USA)\",\n  \"New Caledonia (France)\",\n  \"Niue (New Zealand)\",\n  \"Norfolk Island (Australia)\",\n  \"Northern Mariana Islands (USA)\",\n  \"Pitcairn Islands (UK)\",\n  \"Tokelau (New Zealand)\",\n  \"Wake Island (USA)\",\n  \"Wallis and Futuna (France)\",\n];\n\nfunction Map({ api, address, setAddress }) {\n  // 085Gpl_xNxW1Lw2eeEG28w   works on my site\n  // g8fuAu61idtDdrwdn_k      scroll (on mapillary but not on CT) but no arrows\n  // oregG3_m2QYvKMd4xpTayw   scroll AND arrows on mapillary but not showing arrows on CT\n  // bNtU6RIz3n6C9Hkvmr8EJL   type=\"feature\" - no scrolling at all. comes from /images\n  // ypJtyhRJ5goXQpRlxc2uiQ   same as 276\n  // FmP3BHhYKJVcoKYSIUkUFA   should work but no arrows....\n  const [imgKey, setImgKey] = useState(\"SkWuGrhpMiudoOB_Syk-3w\");\n  const [latlong, setLatlong] = useState({ lat: 0, long: 0 });\n\n  function randCoord() {\n    // LATITUDE -90 to +90\n    let lat = (Math.random() * 90).toFixed(3);\n    if (Math.random() < 0.5) {\n      lat = lat * -1;\n    }\n    // LONGITUDE -180 to + 180\n    let long = (Math.random() * 180).toFixed(3);\n    if (Math.random() < 0.5) {\n      long = long * -1;\n    }\n    return { lat: parseFloat(lat), long: parseFloat(long) }; //why the heck would i need to do this??? long was a string and lat wasnt\n  }\n  function makebbox() {\n    const coord = randCoord();\n    console.log(\"makin a box!\", coord);\n    return {\n      minlong: coord.long - 4,\n      minlat: coord.lat - 2,\n      maxlong: coord.long + 4,\n      maxlat: coord.lat + 2,\n    };\n  }\n\n  useEffect(() => {\n    const bbox = makebbox();\n    fetch(\n      `https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${\n        bbox.minlat\n      },${bbox.maxlong},${\n        bbox.maxlat\n      }&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`\n    )\n      .then((r) => r.json())\n      .then((data) => console.log(\"justfetchedsomestuff\", data));\n  }, []);\n\n  console.log(address);\n  useEffect(() => {\n    fetch(`${api}/city_info`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\",\n      },\n      body: JSON.stringify(latlong),\n    })\n      .then((r) => r.json())\n      .then((body) => handleLocationData(body));\n  }, []); // [latlong]\n\n  function handleLocationData(data) {\n    console.log(data, typeof data);\n    if (!data.error) {\n      data.forEach((d) => {\n        if (d.types.includes(\"country\")) {\n          const countryName = d.long_name;\n          if (europe.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Europe\",\n            }));\n          } else if (asia.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Asia\",\n            }));\n          } else if (africa.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Africa\",\n            }));\n          } else if (northAmerica.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"North America\",\n            }));\n          } else if (southAmerica.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"South America\",\n            }));\n          } else if (oceania.includes(countryName)) {\n            setAddress((address) => ({\n              ...address,\n              country: countryName,\n              continent: \"Oceania/Australia\",\n            }));\n          }\n        } else if (d.types.includes(\"locality\")) {\n          const stateName = d.long_name;\n          setAddress((address) => ({ ...address, state: stateName }));\n        } else if (d.types.includes(\"sublocality\")) {\n          const cityName = d.long_name;\n          setAddress((address) => ({ ...address, city: cityName }));\n        }\n      });\n    }\n  }\n\n  // const [clientID, setClientID] = useState(\"\");\n  // useEffect(() => {\n  //   fetch(`${api}/clientID`)\n  //     .then((r) => {\n  //       console.log(\"response before json()\", r);\n  //       r.json();\n  //     })\n  //     .then((r) => {\n  //       console.log(\"client id call response\", r);\n  //       setClientID(r);\n  //     });\n  // }, []);\n\n  //   useEffect(() => {\n  //     fetch(\n  //       \"https://a.mapillary.com/v3/images?client_id=MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n  //     )\n  //       .then((r) => r.json())\n  //       .then((j) => setImgKey(j.features[10].properties.key));\n  //   }, []);\n\n  return (\n    <div\n      id=\"map-container\"\n      //   role=\"button\"\n      //   tabIndex=\"-1\"\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      {/* <h2>\n        Coords: {latlong.lat}ºN, {latlong.long}ºE\n      </h2> */}\n      <MapillaryViewer\n        clientId=\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n        imageKey={imgKey}\n        filter={[\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"]}\n        // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n        // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n        onNodeChanged={(node) => {\n          console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n          setLatlong({ lat: node.latLon.lat, long: node.latLon.lon });\n        }}\n        // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n      />\n    </div>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}