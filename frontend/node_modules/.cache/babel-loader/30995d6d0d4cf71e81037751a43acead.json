{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\"; // import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address,\n  englishOnly,\n  setEnglishOnly\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n\n    if (newMessage) {\n      setMessages(messages => [...messages, {\n        who: \"user\",\n        text: newMessage\n      }]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = address.initial_greetings;\n    let dontUnderstand = address.dont_understand;\n    let greetings = address.greetings;\n    let ok = address.ok;\n    let correct = address.correct.yes;\n    let incorrect = address.correct.no;\n    let msg = newMessage.toLocaleLowerCase();\n\n    if (address.name && msg.includes(address.name.toLocaleLowerCase()) || address.state && msg.includes(address.state.toLocaleLowerCase()) || address.country && msg.includes(address.country.toLocaleLowerCase()) || address.continent && msg.includes(address.continent.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof correct === \"string\" ? correct : englishOnly ? correct.english_sentence : {\n          l: correct.in_language,\n          t: correct.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"are we in\")) {\n      // they can only land here if they typed \"are we in\" but *didn't* guess the name of the location\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof incorrect === \"string\" ? incorrect : englishOnly ? incorrect.english_sentence : {\n          l: incorrect.in_language,\n          t: incorrect.translation_arr\n        }\n      }]);\n    } else if (includesFood(msg)) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof address.food === \"string\" ? address.food : englishOnly ? address.food.english_sentence : {\n          l: address.food.in_language,\n          t: address.food.translation_arr\n        }\n      }]);\n    } else if (includesLanguage(msg)) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof address.language === \"string\" ? address.language : englishOnly ? address.language.english_sentence : {\n          l: address.language.in_language,\n          t: address.language.translation_arr\n        }\n      }]);\n    } else if ((msg.includes(\"religion\") || msg.includes(\"religious\") || msg.includes(\"holy\") || msg.includes(\"godly\") || msg.includes(\"pray\") || msg.includes(\"god\") || msg.includes(\"worship\") || msg.includes(\"temple\") || msg.includes(\"synagogue\") || msg.includes(\"church\")) && address.religion) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof address.religion === \"string\" ? address.religion : englishOnly ? address.religion.english_sentence : {\n          l: address.religion.in_language,\n          t: address.religion.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"information\") || msg.includes(\"facts\") || msg.includes(\"tell me\") || msg.includes(\"this place\")) {\n      let fact = facts[Math.floor(Math.random() * facts.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof fact === \"string\" ? fact : englishOnly ? fact.english_sentence : {\n          l: fact.in_language,\n          t: fact.translation_arr\n        }\n      }]);\n    } else if (messages.length <= 1) {\n      let greeting = initialGreetings[Math.floor(Math.random() * initialGreetings.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof greeting === \"string\" ? greeting : englishOnly ? greeting.english_sentence : {\n          l: greeting.in_language,\n          t: greeting.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"okay\") || msg.includes(\"ok\") || msg.includes(\"alright\") || msg === \"kay\" || msg === \"k\" || msg === \"no\" || msg.includes(\"fine\") || msg.includes(\"very well\")) {\n      let okay = ok[Math.floor(Math.random() * ok.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof okay === \"string\" ? okay : englishOnly ? okay.english_sentence : {\n          l: okay.in_language,\n          t: okay.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"hey\") || // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n    msg.includes(\"whatsup\") || msg.includes(\"whatsgood\") || msg.includes(\"what's up\") || msg.includes(\"what's good\") || msg.includes(\"hello\") || msg.includes(\"howdy\") || msg.includes(\"hola\") || msg === \"hi\" || msg.includes(\"good morning\") || msg.includes(\"good day\") || msg.includes(\"how are you\") || msg.includes(\"what's the sitch\")) {\n      let greeting = greetings[Math.floor(Math.random() * greetings.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof greeting === \"string\" ? greeting : englishOnly ? greeting.english_sentence : {\n          l: greeting.in_language,\n          t: greeting.translation_arr\n        }\n      }]);\n    } else {\n      let du = // *d*on't *u*nderstand\n      dontUnderstand[Math.floor(Math.random() * dontUnderstand.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof du === \"string\" ? du : englishOnly ? du.english_sentence : {\n          l: du.in_language,\n          t: du.translation_arr\n        }\n      }]);\n    }\n  }\n\n  function includesFood(msg) {\n    let english = [\"food\", \"dinner\", \"lunch\", \"breakfast\", \"hungry\", \"snack\", \"eat\", \"grub\", \"meal\", \"bite\", \"hunger\"];\n    let spanish = [\"comida\", \"cena\", \"almuerzo\", \"desayuno\", \"hambriento\", \"bocadillo\", \"comer\", \"comida\", \"comida\", \"morder\", \"hambre\"];\n    let french = [\"aliments\", \"dîner\", \"déjeuner\", \"petit-déjeuner\", \"dejeuner\", \"diner\", \"manger\", \"petit-dejeuner\", \"repas\", \"mordre\", \"faim\"];\n    let german = [\"lebensmittel\", \"abendessen\", \"mittagessen\", \"frühstück\", \"hungrig\", \"snack\", \"essen\", \"fruhstuck\", \"mahlzeit\", \"beißen\", \"hunger\"];\n    let portuguese = [\"cafe de manha\", \"jantar\", \"almoço\", \"café da manhã\", \"refeicao\", \"lanche\", \"comer\", \"almoco\", \"refeição\", \"comida\", \"fome\"];\n    let italian = [\"cibo\", \"cena\", \"pranzo\", \"prima colazione\", \"Affamato\", \"merenda\", \"mangiare\", \"mangia\", \"pasto\", \"mordere\", \"fame\"];\n\n    for (let i = 0; i < english.length; i++) {\n      if (msg.includes(english[i])) {\n        return true;\n      } else {\n        if (address.language_name === \"spanish\") {\n          if (msg.includes(spanish[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"french\") {\n          if (msg.includes(french[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"german\") {\n          if (msg.includes(german[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"italian\") {\n          if (msg.includes(italian[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"portuguese\") {\n          if (msg.includes(portuguese[i])) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function includesLanguage(msg) {\n    let english = [\"language\", \"tongue\", \"speak\", \"english\", \"idioma\"];\n    let spanish = [\"idioma\", \"lengua\", \"habla\", \"inglés\", \"idioma\"];\n    let french = [\"langue\", \"langue\", \"parle\", \"anglais\", \"idioma\"];\n    let german = [\"sprache\", \"zunge\", \"sprech\", \"englisch\", \"idiom\"];\n    let portuguese;\n    let italian = [\"lingua\", \"lingua\", \"parlare\", \"inglese\", \"idioma\"];\n\n    for (let i = 0; i < english.length; i++) {\n      if (msg.includes(english[i])) {\n        return true;\n      } else {\n        if (address.language_name === \"spanish\") {\n          if (msg.includes(spanish[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"french\") {\n          if (msg.includes(french[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"german\") {\n          if (msg.includes(german[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"italian\") {\n          if (msg.includes(italian[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"portuguese\") {\n          if (msg.includes(portuguese[i])) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"head\",\n      children: [\"Chat\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-mode-box\",\n        style: {\n          color: \"yellow\",\n          backgroundColor: \"#2d3436\"\n        },\n        onClick: e => setChatShowing(false),\n        children: \"\\u2015\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      ref: messageEl,\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg\",\n        style: m.who === \"bot\" ? {\n          backgroundColor: \"lightblue\"\n        } : {\n          backgroundColor: \"white\",\n          textAlign: \"right\"\n        },\n        children: m.who === \"bot\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => setSecretFlag(!secretFlag),\n            children: secretFlag ? address.flag_emoji : \"🤖\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: typeof m.text === \"string\" ? m.text : m.text.l.map((word, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"tooltip\",\n                children: [word, /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"tooltiptext\",\n                  children: m.text.t[i]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 27\n              }, this), \" \"]\n            }, void 0, true))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 17\n          }, this), \" \"]\n        }, void 0, true) : m.text + \"  🧳\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setEnglishOnly(!englishOnly),\n        children: englishOnly ? address.globe_emoji : \"🇬🇧\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: messages.length ? \"reply...\" : \"Start conversation...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"green\",\n              color: \"white\"\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"zLbR4GnDFKr4oyTZZwyVjxuqsX8=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js"],"names":["React","useState","useRef","useEffect","Chat","setChatShowing","messages","setMessages","address","englishOnly","setEnglishOnly","newMessage","setNewMessage","secretFlag","setSecretFlag","showEnglishWord","setShowEnglishWord","handleSend","e","preventDefault","who","text","setTimeout","botReply","facts","food","language","religion","initialGreetings","initial_greetings","dontUnderstand","dont_understand","greetings","ok","correct","yes","incorrect","no","msg","toLocaleLowerCase","name","includes","state","country","continent","english_sentence","l","in_language","t","translation_arr","includesFood","includesLanguage","fact","Math","floor","random","length","greeting","okay","du","english","spanish","french","german","portuguese","italian","i","language_name","messageEl","current","addEventListener","event","currentTarget","target","scroll","top","scrollHeight","behavior","color","backgroundColor","map","m","textAlign","cursor","flag_emoji","word","globe_emoji","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n// import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address,\n  englishOnly,\n  setEnglishOnly,\n}) {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n    if (newMessage) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"user\", text: newMessage },\n      ]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = address.initial_greetings;\n    let dontUnderstand = address.dont_understand;\n    let greetings = address.greetings;\n    let ok = address.ok;\n    let correct = address.correct.yes;\n    let incorrect = address.correct.no;\n\n    let msg = newMessage.toLocaleLowerCase();\n\n    if (\n      (address.name && msg.includes(address.name.toLocaleLowerCase())) ||\n      (address.state && msg.includes(address.state.toLocaleLowerCase())) ||\n      (address.country && msg.includes(address.country.toLocaleLowerCase())) ||\n      (address.continent && msg.includes(address.continent.toLocaleLowerCase()))\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof correct === \"string\"\n              ? correct\n              : englishOnly\n              ? correct.english_sentence\n              : {\n                  l: correct.in_language,\n                  t: correct.translation_arr,\n                },\n        },\n      ]);\n    } else if (msg.includes(\"are we in\")) {\n      // they can only land here if they typed \"are we in\" but *didn't* guess the name of the location\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof incorrect === \"string\"\n              ? incorrect\n              : englishOnly\n              ? incorrect.english_sentence\n              : {\n                  l: incorrect.in_language,\n                  t: incorrect.translation_arr,\n                },\n        },\n      ]);\n    } else if (includesFood(msg)) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.food === \"string\"\n              ? address.food\n              : englishOnly\n              ? address.food.english_sentence\n              : {\n                  l: address.food.in_language,\n                  t: address.food.translation_arr,\n                },\n        },\n      ]);\n    } else if (includesLanguage(msg)) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.language === \"string\"\n              ? address.language\n              : englishOnly\n              ? address.language.english_sentence\n              : {\n                  l: address.language.in_language,\n                  t: address.language.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      (msg.includes(\"religion\") ||\n        msg.includes(\"religious\") ||\n        msg.includes(\"holy\") ||\n        msg.includes(\"godly\") ||\n        msg.includes(\"pray\") ||\n        msg.includes(\"god\") ||\n        msg.includes(\"worship\") ||\n        msg.includes(\"temple\") ||\n        msg.includes(\"synagogue\") ||\n        msg.includes(\"church\")) &&\n      address.religion\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.religion === \"string\"\n              ? address.religion\n              : englishOnly\n              ? address.religion.english_sentence\n              : {\n                  l: address.religion.in_language,\n                  t: address.religion.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"information\") ||\n      msg.includes(\"facts\") ||\n      msg.includes(\"tell me\") ||\n      msg.includes(\"this place\")\n    ) {\n      let fact = facts[Math.floor(Math.random() * facts.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof fact === \"string\"\n              ? fact\n              : englishOnly\n              ? fact.english_sentence\n              : {\n                  l: fact.in_language,\n                  t: fact.translation_arr,\n                },\n        },\n      ]);\n    } else if (messages.length <= 1) {\n      let greeting =\n        initialGreetings[Math.floor(Math.random() * initialGreetings.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof greeting === \"string\"\n              ? greeting\n              : englishOnly\n              ? greeting.english_sentence\n              : {\n                  l: greeting.in_language,\n                  t: greeting.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"okay\") ||\n      msg.includes(\"ok\") ||\n      msg.includes(\"alright\") ||\n      msg === \"kay\" ||\n      msg === \"k\" ||\n      msg === \"no\" ||\n      msg.includes(\"fine\") ||\n      msg.includes(\"very well\")\n    ) {\n      let okay = ok[Math.floor(Math.random() * ok.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof okay === \"string\"\n              ? okay\n              : englishOnly\n              ? okay.english_sentence\n              : {\n                  l: okay.in_language,\n                  t: okay.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"hey\") ||\n      // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n      msg.includes(\"whatsup\") ||\n      msg.includes(\"whatsgood\") ||\n      msg.includes(\"what's up\") ||\n      msg.includes(\"what's good\") ||\n      msg.includes(\"hello\") ||\n      msg.includes(\"howdy\") ||\n      msg.includes(\"hola\") ||\n      msg === \"hi\" ||\n      msg.includes(\"good morning\") ||\n      msg.includes(\"good day\") ||\n      msg.includes(\"how are you\") ||\n      msg.includes(\"what's the sitch\")\n    ) {\n      let greeting = greetings[Math.floor(Math.random() * greetings.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof greeting === \"string\"\n              ? greeting\n              : englishOnly\n              ? greeting.english_sentence\n              : {\n                  l: greeting.in_language,\n                  t: greeting.translation_arr,\n                },\n        },\n      ]);\n    } else {\n      let du = // *d*on't *u*nderstand\n        dontUnderstand[Math.floor(Math.random() * dontUnderstand.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof du === \"string\"\n              ? du\n              : englishOnly\n              ? du.english_sentence\n              : {\n                  l: du.in_language,\n                  t: du.translation_arr,\n                },\n        },\n      ]);\n    }\n  }\n\n  function includesFood(msg) {\n    let english = [\n      \"food\",\n      \"dinner\",\n      \"lunch\",\n      \"breakfast\",\n      \"hungry\",\n      \"snack\",\n      \"eat\",\n      \"grub\",\n      \"meal\",\n      \"bite\",\n      \"hunger\",\n    ];\n    let spanish = [\n      \"comida\",\n      \"cena\",\n      \"almuerzo\",\n      \"desayuno\",\n      \"hambriento\",\n      \"bocadillo\",\n      \"comer\",\n      \"comida\",\n      \"comida\",\n      \"morder\",\n      \"hambre\",\n    ];\n    let french = [\n      \"aliments\",\n      \"dîner\",\n      \"déjeuner\",\n      \"petit-déjeuner\",\n      \"dejeuner\",\n      \"diner\",\n      \"manger\",\n      \"petit-dejeuner\",\n      \"repas\",\n      \"mordre\",\n      \"faim\",\n    ];\n    let german = [\n      \"lebensmittel\",\n      \"abendessen\",\n      \"mittagessen\",\n      \"frühstück\",\n      \"hungrig\",\n      \"snack\",\n      \"essen\",\n      \"fruhstuck\",\n      \"mahlzeit\",\n      \"beißen\",\n      \"hunger\",\n    ];\n    let portuguese = [\n      \"cafe de manha\",\n      \"jantar\",\n      \"almoço\",\n      \"café da manhã\",\n      \"refeicao\",\n      \"lanche\",\n      \"comer\",\n      \"almoco\",\n      \"refeição\",\n      \"comida\",\n      \"fome\",\n    ];\n    let italian = [\n      \"cibo\",\n      \"cena\",\n      \"pranzo\",\n      \"prima colazione\",\n      \"Affamato\",\n      \"merenda\",\n      \"mangiare\",\n      \"mangia\",\n      \"pasto\",\n      \"mordere\",\n      \"fame\",\n    ];\n\n    for (let i = 0; i < english.length; i++) {\n      if (msg.includes(english[i])) {\n        return true;\n      } else {\n        if (address.language_name === \"spanish\") {\n          if (msg.includes(spanish[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"french\") {\n          if (msg.includes(french[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"german\") {\n          if (msg.includes(german[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"italian\") {\n          if (msg.includes(italian[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"portuguese\") {\n          if (msg.includes(portuguese[i])) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function includesLanguage(msg) {\n    let english = [\"language\", \"tongue\", \"speak\", \"english\", \"idioma\"];\n    let spanish = [\"idioma\", \"lengua\", \"habla\", \"inglés\", \"idioma\"];\n    let french = [\"langue\", \"langue\", \"parle\", \"anglais\", \"idioma\"];\n    let german = [\"sprache\", \"zunge\", \"sprech\", \"englisch\", \"idiom\"];\n    let portuguese;\n    let italian = [\"lingua\", \"lingua\", \"parlare\", \"inglese\", \"idioma\"];\n\n    for (let i = 0; i < english.length; i++) {\n      if (msg.includes(english[i])) {\n        return true;\n      } else {\n        if (address.language_name === \"spanish\") {\n          if (msg.includes(spanish[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"french\") {\n          if (msg.includes(french[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"german\") {\n          if (msg.includes(german[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"italian\") {\n          if (msg.includes(italian[i])) {\n            return true;\n          }\n        } else if (address.language_name === \"portuguese\") {\n          if (msg.includes(portuguese[i])) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <div className=\"head\">\n        Chat\n        <span\n          className=\"close-mode-box\"\n          style={{ color: \"yellow\", backgroundColor: \"#2d3436\" }}\n          onClick={(e) => setChatShowing(false)}\n        >\n          ―\n        </span>\n      </div>\n      <div className=\"messages\" ref={messageEl}>\n        {messages.map((m, i) => (\n          <div\n            className=\"msg\"\n            key={i}\n            style={\n              m.who === \"bot\"\n                ? { backgroundColor: \"lightblue\" }\n                : { backgroundColor: \"white\", textAlign: \"right\" }\n            }\n          >\n            {m.who === \"bot\" ? (\n              <>\n                <span\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => setSecretFlag(!secretFlag)}\n                >\n                  {secretFlag ? address.flag_emoji : \"🤖\"}\n                </span>{\" \"}\n                <span>\n                  {typeof m.text === \"string\"\n                    ? m.text\n                    : m.text.l.map((word, i) => (\n                        <>\n                          <span className=\"tooltip\">\n                            {word}\n                            <span class=\"tooltiptext\">{m.text.t[i]}</span>\n                          </span>{\" \"}\n                        </>\n                      ))}\n                </span>{\" \"}\n              </>\n            ) : (\n              m.text + \"  🧳\"\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"footer\">\n        <span onClick={() => setEnglishOnly(!englishOnly)}>\n          {englishOnly ? address.globe_emoji : \"🇬🇧\"}\n        </span>\n        <form onSubmit={handleSend}>\n          <span>\n            <input\n              type=\"text\"\n              placeholder={\n                messages.length ? \"reply...\" : \"Start conversation...\"\n              }\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n            ></input>\n            <button style={{ backgroundColor: \"green\", color: \"white\" }}>\n              Send\n            </button>\n          </span>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}