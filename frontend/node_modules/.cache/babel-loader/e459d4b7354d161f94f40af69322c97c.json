{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\"; // import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address,\n  englishOnly,\n  setEnglishOnly\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n\n    if (newMessage) {\n      setMessages(messages => [...messages, {\n        who: \"user\",\n        text: newMessage\n      }]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = address.initial_greetings;\n    let dontUnderstand = address.dont_understand;\n    let greetings = address.greetings; // [\n    //   \"Hey! :)\",\n    //   \"Wonderful day!\",\n    //   \"Life is great honestly.\",\n    //   \"Howdy!!\",\n    // ];\n\n    let ok = [\"okay\", \"ok\", \"alright\", \"fine\", \"very well\"];\n    let msg = newMessage.toLocaleLowerCase(); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n\n    if (address.name && msg.includes(address.name.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.name}! Great guess.`\n      }]);\n    } else if (address.state && msg.includes(address.state.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.state}! Great guess.`\n      }]);\n    } else if (address.country && msg.includes(address.country.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.country}! Great guess.`\n      }]);\n    } else if (address.continent && msg.includes(address.continent.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.continent}! Great guess.`\n      }]);\n    } else if (msg.includes(\"food\") || msg.includes(\"dinner\") || msg.includes(\"lunch\") || msg.includes(\"breakfast\") || msg.includes(\"hungry\") || msg.includes(\"snack\") || msg.includes(\"eat\") || msg.includes(\"grub\") || msg.includes(\"meal\") || msg.includes(\"bite\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof address.food === \"string\" ? address.food : englishOnly ? address.food.english_sentence : {\n          l: address.food.in_language,\n          t: address.food.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"language\") || msg.includes(\"tongue\") || msg.includes(\"speak\") || msg.includes(\"english\") || msg.includes(\"idioma\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof address.language === \"string\" ? address.language : englishOnly ? address.language.english_sentence : {\n          l: address.language.in_language,\n          t: address.language.translation_arr\n        }\n      }]);\n    } else if ((msg.includes(\"religion\") || msg.includes(\"religious\") || msg.includes(\"holy\") || msg.includes(\"godly\") || msg.includes(\"pray\") || msg.includes(\"god\") || msg.includes(\"worship\") || msg.includes(\"temple\") || msg.includes(\"synagogue\") || msg.includes(\"church\")) && address.religion) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof address.religion === \"string\" ? address.religion : englishOnly ? address.religion.english_sentence : {\n          l: address.religion.in_language,\n          t: address.religion.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"information\") || msg.includes(\"facts\") || msg.includes(\"tell me\") || msg.includes(\"this place\")) {\n      let fact = facts[Math.floor(Math.random() * facts.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof fact === \"string\" ? fact : englishOnly ? fact.english_sentence : {\n          l: fact.in_language,\n          t: fact.translation_arr\n        }\n      }]);\n    } else if (messages.length <= 1) {\n      let greeting = initialGreetings[Math.floor(Math.random() * initialGreetings.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof greeting === \"string\" ? greeting : englishOnly ? greeting.english_sentence : {\n          l: greeting.in_language,\n          t: greeting.translation_arr\n        }\n      }]);\n    } else if (msg.includes(\"okay\") || msg.includes(\"ok\") || msg.includes(\"alright\") || msg === \"kay\" || msg === \"k\" || msg.includes(\"no\") || msg.includes(\"fine\") || msg.includes(\"very well\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: ok[Math.floor(Math.random() * ok.length)]\n      }]);\n    } else if (msg.includes(\"hey\") || // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n    msg.includes(\"whatsup\") || msg.includes(\"whatsgood\") || msg.includes(\"what's up\") || msg.includes(\"what's good\") || msg.includes(\"hello\") || msg.includes(\"howdy\") || msg.includes(\"hola\") || msg.includes(\"how are you\") || msg.includes(\"what's the sitch\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: greetings[Math.floor(Math.random() * greetings.length)]\n      }]);\n    } else {\n      let du = // *d*on't *u*nderstand\n      dontUnderstand[Math.floor(Math.random() * dontUnderstand.length)];\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: typeof du === \"string\" ? du : englishOnly ? du.english_sentence : {\n          l: du.in_language,\n          t: du.translation_arr\n        }\n      }]);\n    }\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"head\",\n      children: [\"Chat\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-mode-box\",\n        style: {\n          color: \"yellow\",\n          backgroundColor: \"#2d3436\"\n        },\n        onClick: e => setChatShowing(false),\n        children: \"\\u2015\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      ref: messageEl,\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg\",\n        style: m.who === \"bot\" ? {\n          backgroundColor: \"lightblue\"\n        } : {\n          backgroundColor: \"white\",\n          textAlign: \"right\"\n        },\n        children: m.who === \"bot\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => setSecretFlag(!secretFlag),\n            children: secretFlag ? address.flag_emoji : \"ðŸ¤–\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: typeof m.text === \"string\" ? m.text : m.text.l.map((word, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"tooltip\",\n                children: [word, /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"tooltiptext\",\n                  children: m.text.t[i]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 27\n              }, this), \" \"]\n            }, void 0, true))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this), \" \"]\n        }, void 0, true) : m.text + \"  ðŸ§³\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setEnglishOnly(!englishOnly),\n        children: englishOnly ? address.globe_emoji : \"ðŸ‡¬ðŸ‡§\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: messages.length ? \"reply...\" : \"Start conversation...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"green\",\n              color: \"white\"\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"zLbR4GnDFKr4oyTZZwyVjxuqsX8=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js"],"names":["React","useState","useRef","useEffect","Chat","setChatShowing","messages","setMessages","address","englishOnly","setEnglishOnly","newMessage","setNewMessage","secretFlag","setSecretFlag","showEnglishWord","setShowEnglishWord","handleSend","e","preventDefault","who","text","setTimeout","botReply","facts","food","language","religion","initialGreetings","initial_greetings","dontUnderstand","dont_understand","greetings","ok","msg","toLocaleLowerCase","name","includes","state","country","continent","english_sentence","l","in_language","t","translation_arr","fact","Math","floor","random","length","greeting","du","messageEl","current","addEventListener","event","currentTarget","target","scroll","top","scrollHeight","behavior","color","backgroundColor","map","m","i","textAlign","cursor","flag_emoji","word","globe_emoji","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n// import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address,\n  englishOnly,\n  setEnglishOnly,\n}) {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n    if (newMessage) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"user\", text: newMessage },\n      ]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = address.initial_greetings;\n    let dontUnderstand = address.dont_understand;\n    let greetings = address.greetings;\n    // [\n    //   \"Hey! :)\",\n    //   \"Wonderful day!\",\n    //   \"Life is great honestly.\",\n    //   \"Howdy!!\",\n    // ];\n    let ok = [\"okay\", \"ok\", \"alright\", \"fine\", \"very well\"];\n\n    let msg = newMessage.toLocaleLowerCase(); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n\n    if (address.name && msg.includes(address.name.toLocaleLowerCase())) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: `Yes! We are in ${address.name}! Great guess.` },\n      ]);\n    } else if (\n      address.state &&\n      msg.includes(address.state.toLocaleLowerCase())\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: `Yes! We are in ${address.state}! Great guess.` },\n      ]);\n    } else if (\n      address.country &&\n      msg.includes(address.country.toLocaleLowerCase())\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: `Yes! We are in ${address.country}! Great guess.` },\n      ]);\n    } else if (\n      address.continent &&\n      msg.includes(address.continent.toLocaleLowerCase())\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: `Yes! We are in ${address.continent}! Great guess.`,\n        },\n      ]);\n    } else if (\n      msg.includes(\"food\") ||\n      msg.includes(\"dinner\") ||\n      msg.includes(\"lunch\") ||\n      msg.includes(\"breakfast\") ||\n      msg.includes(\"hungry\") ||\n      msg.includes(\"snack\") ||\n      msg.includes(\"eat\") ||\n      msg.includes(\"grub\") ||\n      msg.includes(\"meal\") ||\n      msg.includes(\"bite\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.food === \"string\"\n              ? address.food\n              : englishOnly\n              ? address.food.english_sentence\n              : {\n                  l: address.food.in_language,\n                  t: address.food.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"language\") ||\n      msg.includes(\"tongue\") ||\n      msg.includes(\"speak\") ||\n      msg.includes(\"english\") ||\n      msg.includes(\"idioma\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.language === \"string\"\n              ? address.language\n              : englishOnly\n              ? address.language.english_sentence\n              : {\n                  l: address.language.in_language,\n                  t: address.language.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      (msg.includes(\"religion\") ||\n        msg.includes(\"religious\") ||\n        msg.includes(\"holy\") ||\n        msg.includes(\"godly\") ||\n        msg.includes(\"pray\") ||\n        msg.includes(\"god\") ||\n        msg.includes(\"worship\") ||\n        msg.includes(\"temple\") ||\n        msg.includes(\"synagogue\") ||\n        msg.includes(\"church\")) &&\n      address.religion\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof address.religion === \"string\"\n              ? address.religion\n              : englishOnly\n              ? address.religion.english_sentence\n              : {\n                  l: address.religion.in_language,\n                  t: address.religion.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"information\") ||\n      msg.includes(\"facts\") ||\n      msg.includes(\"tell me\") ||\n      msg.includes(\"this place\")\n    ) {\n      let fact = facts[Math.floor(Math.random() * facts.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof fact === \"string\"\n              ? fact\n              : englishOnly\n              ? fact.english_sentence\n              : {\n                  l: fact.in_language,\n                  t: fact.translation_arr,\n                },\n        },\n      ]);\n    } else if (messages.length <= 1) {\n      let greeting =\n        initialGreetings[Math.floor(Math.random() * initialGreetings.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof greeting === \"string\"\n              ? greeting\n              : englishOnly\n              ? greeting.english_sentence\n              : {\n                  l: greeting.in_language,\n                  t: greeting.translation_arr,\n                },\n        },\n      ]);\n    } else if (\n      msg.includes(\"okay\") ||\n      msg.includes(\"ok\") ||\n      msg.includes(\"alright\") ||\n      msg === \"kay\" ||\n      msg === \"k\" ||\n      msg.includes(\"no\") ||\n      msg.includes(\"fine\") ||\n      msg.includes(\"very well\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: ok[Math.floor(Math.random() * ok.length)],\n        },\n      ]);\n    } else if (\n      msg.includes(\"hey\") ||\n      // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n      msg.includes(\"whatsup\") ||\n      msg.includes(\"whatsgood\") ||\n      msg.includes(\"what's up\") ||\n      msg.includes(\"what's good\") ||\n      msg.includes(\"hello\") ||\n      msg.includes(\"howdy\") ||\n      msg.includes(\"hola\") ||\n      msg.includes(\"how are you\") ||\n      msg.includes(\"what's the sitch\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: greetings[Math.floor(Math.random() * greetings.length)],\n        },\n      ]);\n    } else {\n      let du = // *d*on't *u*nderstand\n        dontUnderstand[Math.floor(Math.random() * dontUnderstand.length)];\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            typeof du === \"string\"\n              ? du\n              : englishOnly\n              ? du.english_sentence\n              : {\n                  l: du.in_language,\n                  t: du.translation_arr,\n                },\n        },\n      ]);\n    }\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <div className=\"head\">\n        Chat\n        <span\n          className=\"close-mode-box\"\n          style={{ color: \"yellow\", backgroundColor: \"#2d3436\" }}\n          onClick={(e) => setChatShowing(false)}\n        >\n          â€•\n        </span>\n      </div>\n      <div className=\"messages\" ref={messageEl}>\n        {messages.map((m, i) => (\n          <div\n            className=\"msg\"\n            key={i}\n            style={\n              m.who === \"bot\"\n                ? { backgroundColor: \"lightblue\" }\n                : { backgroundColor: \"white\", textAlign: \"right\" }\n            }\n          >\n            {m.who === \"bot\" ? (\n              <>\n                <span\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => setSecretFlag(!secretFlag)}\n                >\n                  {secretFlag ? address.flag_emoji : \"ðŸ¤–\"}\n                </span>{\" \"}\n                <span>\n                  {typeof m.text === \"string\"\n                    ? m.text\n                    : m.text.l.map((word, i) => (\n                        <>\n                          <span className=\"tooltip\">\n                            {word}\n                            <span class=\"tooltiptext\">{m.text.t[i]}</span>\n                          </span>{\" \"}\n                        </>\n                      ))}\n                </span>{\" \"}\n              </>\n            ) : (\n              m.text + \"  ðŸ§³\"\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"footer\">\n        <span onClick={() => setEnglishOnly(!englishOnly)}>\n          {englishOnly ? address.globe_emoji : \"ðŸ‡¬ðŸ‡§\"}\n        </span>\n        <form onSubmit={handleSend}>\n          <span>\n            <input\n              type=\"text\"\n              placeholder={\n                messages.length ? \"reply...\" : \"Start conversation...\"\n              }\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n            ></input>\n            <button style={{ backgroundColor: \"green\", color: \"white\" }}>\n              Send\n            </button>\n          </span>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}