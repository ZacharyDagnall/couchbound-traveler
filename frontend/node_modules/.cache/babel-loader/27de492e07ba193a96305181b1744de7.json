{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\"; // import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Chat({\n  setChatShowing,\n  messages,\n  setMessages,\n  address\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n\n    if (newMessage) {\n      setMessages(messages => [...messages, {\n        who: \"user\",\n        text: newMessage\n      }]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = [\"Hello! Nice to meet you. If there's something specific you're looking for, I might be able to help.\", \"Hey, what's up? If you ask something specific, maybe I can help!\"];\n    let noComprendo = [\"I'm sorry.. I don't quite understand. Try asking another question, or being more specific.\", \"Hmm.. I don't get what you mean.. Can you say or ask that in a different way?\"];\n    let greetings = [\"Hey! :)\", \"Wonderful day!\", \"Life is great honestly.\", \"Howdy!!\"];\n    let ok = [\"okay\", \"ok\", \"alright\", \"fine\", \"very well\"];\n    let msg = newMessage.toLocaleLowerCase(); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n\n    if (address.name && msg.includes(address.name.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.name}! Great guess.`\n      }]);\n    } else if (address.state && msg.includes(address.state.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.state}! Great guess.`\n      }]);\n    } else if (address.country && msg.includes(address.country.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.country}! Great guess.`\n      }]);\n    } else if (address.continent && msg.includes(address.continent.toLocaleLowerCase())) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: `Yes! We are in ${address.continent}! Great guess.`\n      }]);\n    } else if (msg.includes(\"food\") || msg.includes(\"dinner\") || msg.includes(\"lunch\") || msg.includes(\"breakfast\") || msg.includes(\"hungry\") || msg.includes(\"snack\") || msg.includes(\"eat\") || msg.includes(\"grub\") || msg.includes(\"meal\") || msg.includes(\"bite\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.food.in_language\n      }]);\n    } else if (msg.includes(\"language\") || msg.includes(\"tongue\") || msg.includes(\"speak\") || msg.includes(\"english\") || msg.includes(\"idioma\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.language\n      }]);\n    } else if ((msg.includes(\"religion\") || msg.includes(\"religious\") || msg.includes(\"holy\") || msg.includes(\"godly\") || msg.includes(\"prayer\") || msg.includes(\"God\") || msg.includes(\"worship\") || msg.includes(\"temple\") || msg.includes(\"synagogue\") || msg.includes(\"church\")) && address.religion) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: address.religion\n      }]);\n    } else if (msg.includes(\"information\") || msg.includes(\"facts\") || msg.includes(\"tell me\") || msg.includes(\"this place\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: facts[Math.floor(Math.random() * facts.length)]\n      }]);\n    } else if (messages.length <= 1) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: initialGreetings[Math.floor(Math.random() * initialGreetings.length)]\n      }]);\n    } else if (msg.includes(\"okay\") || msg.includes(\"ok\") || msg.includes(\"alright\") || msg === \"kay\" || msg === \"k\" || msg.includes(\"fine\") || msg.includes(\"very well\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: ok[Math.floor(Math.random() * ok.length)]\n      }]);\n    } else if (msg.includes(\"hey\") || // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n    msg.includes(\"whatsup\") || msg.includes(\"whatsgood\") || msg.includes(\"what's up\") || msg.includes(\"what's good\") || msg.includes(\"hello\") || msg.includes(\"howdy\") || msg.includes(\"hola\") || msg.includes(\"how are you\") || msg.includes(\"what's the sitch\")) {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: greetings[Math.floor(Math.random() * greetings.length)]\n      }]);\n    } else {\n      setMessages(messages => [...messages, {\n        who: \"bot\",\n        text: noComprendo[Math.floor(Math.random() * noComprendo.length)]\n      }]);\n    }\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"head\",\n      children: [\"Chat\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-mode-box\",\n        style: {\n          color: \"yellow\",\n          backgroundColor: \"#2d3436\"\n        },\n        onClick: e => setChatShowing(false),\n        children: \"\\u2015\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      ref: messageEl,\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg\",\n        style: m.who === \"bot\" ? {\n          backgroundColor: \"lightblue\"\n        } : {\n          backgroundColor: \"white\",\n          textAlign: \"right\"\n        },\n        children: m.who === \"bot\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => setSecretFlag(!secretFlag),\n            children: secretFlag ? address.flag_emoji : \"ðŸ¤–\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: typeof m.text === \"string\" ? m.text : m.text.map((word, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tooltip\" // onMouseEnter={() => setShowEnglishWord(true)}\n              // onMouseLeave={() => setShowEnglishWord(false)}\n              // title={\n              //   showEnglishWord\n              //     ? address.food.translation_arr[i]\n              //     : \"\"\n              // }\n              ,\n              children: [word, /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"tooltiptext\",\n                children: \"Tooltip text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this), \" \"]\n        }, void 0, true) : m.text + \"  ðŸ§³\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: messages.length ? \"reply...\" : \"Start conversation...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"green\",\n              color: \"white\"\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"zLbR4GnDFKr4oyTZZwyVjxuqsX8=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Chat.js"],"names":["React","useState","useRef","useEffect","Chat","setChatShowing","messages","setMessages","address","newMessage","setNewMessage","secretFlag","setSecretFlag","showEnglishWord","setShowEnglishWord","handleSend","e","preventDefault","who","text","setTimeout","botReply","facts","food","language","religion","initialGreetings","noComprendo","greetings","ok","msg","toLocaleLowerCase","name","includes","state","country","continent","in_language","Math","floor","random","length","messageEl","current","addEventListener","event","currentTarget","target","scroll","top","scrollHeight","behavior","color","backgroundColor","map","m","i","textAlign","cursor","flag_emoji","word","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n// import { FixedSizeList, VariableSizeList } from \"react-window\";\n\nfunction Chat({ setChatShowing, messages, setMessages, address }) {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [secretFlag, setSecretFlag] = useState(false);\n  const [showEnglishWord, setShowEnglishWord] = useState(false);\n\n  function handleSend(e) {\n    e.preventDefault();\n    if (newMessage) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"user\", text: newMessage },\n      ]);\n      setNewMessage(\"\");\n      setTimeout(botReply, 800);\n    }\n  }\n\n  function botReply() {\n    let facts = [address.food, address.language, address.religion];\n    let initialGreetings = [\n      \"Hello! Nice to meet you. If there's something specific you're looking for, I might be able to help.\",\n      \"Hey, what's up? If you ask something specific, maybe I can help!\",\n    ];\n    let noComprendo = [\n      \"I'm sorry.. I don't quite understand. Try asking another question, or being more specific.\",\n      \"Hmm.. I don't get what you mean.. Can you say or ask that in a different way?\",\n    ];\n    let greetings = [\n      \"Hey! :)\",\n      \"Wonderful day!\",\n      \"Life is great honestly.\",\n      \"Howdy!!\",\n    ];\n    let ok = [\"okay\", \"ok\", \"alright\", \"fine\", \"very well\"];\n\n    let msg = newMessage.toLocaleLowerCase(); //newMessage shouldn't be \"\" because of the way state works; should be last message (yo creo)\n\n    if (address.name && msg.includes(address.name.toLocaleLowerCase())) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: `Yes! We are in ${address.name}! Great guess.` },\n      ]);\n    } else if (\n      address.state &&\n      msg.includes(address.state.toLocaleLowerCase())\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: `Yes! We are in ${address.state}! Great guess.` },\n      ]);\n    } else if (\n      address.country &&\n      msg.includes(address.country.toLocaleLowerCase())\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: `Yes! We are in ${address.country}! Great guess.` },\n      ]);\n    } else if (\n      address.continent &&\n      msg.includes(address.continent.toLocaleLowerCase())\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: `Yes! We are in ${address.continent}! Great guess.`,\n        },\n      ]);\n    } else if (\n      msg.includes(\"food\") ||\n      msg.includes(\"dinner\") ||\n      msg.includes(\"lunch\") ||\n      msg.includes(\"breakfast\") ||\n      msg.includes(\"hungry\") ||\n      msg.includes(\"snack\") ||\n      msg.includes(\"eat\") ||\n      msg.includes(\"grub\") ||\n      msg.includes(\"meal\") ||\n      msg.includes(\"bite\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.food.in_language },\n      ]);\n    } else if (\n      msg.includes(\"language\") ||\n      msg.includes(\"tongue\") ||\n      msg.includes(\"speak\") ||\n      msg.includes(\"english\") ||\n      msg.includes(\"idioma\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.language },\n      ]);\n    } else if (\n      (msg.includes(\"religion\") ||\n        msg.includes(\"religious\") ||\n        msg.includes(\"holy\") ||\n        msg.includes(\"godly\") ||\n        msg.includes(\"prayer\") ||\n        msg.includes(\"God\") ||\n        msg.includes(\"worship\") ||\n        msg.includes(\"temple\") ||\n        msg.includes(\"synagogue\") ||\n        msg.includes(\"church\")) &&\n      address.religion\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: address.religion },\n      ]);\n    } else if (\n      msg.includes(\"information\") ||\n      msg.includes(\"facts\") ||\n      msg.includes(\"tell me\") ||\n      msg.includes(\"this place\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        { who: \"bot\", text: facts[Math.floor(Math.random() * facts.length)] },\n      ]);\n    } else if (messages.length <= 1) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text:\n            initialGreetings[\n              Math.floor(Math.random() * initialGreetings.length)\n            ],\n        },\n      ]);\n    } else if (\n      msg.includes(\"okay\") ||\n      msg.includes(\"ok\") ||\n      msg.includes(\"alright\") ||\n      msg === \"kay\" ||\n      msg === \"k\" ||\n      msg.includes(\"fine\") ||\n      msg.includes(\"very well\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: ok[Math.floor(Math.random() * ok.length)],\n        },\n      ]);\n    } else if (\n      msg.includes(\"hey\") ||\n      // msg.includes(\"yo\") ||    //this doesn't work because it catches too many words like you and yogurt\n      msg.includes(\"whatsup\") ||\n      msg.includes(\"whatsgood\") ||\n      msg.includes(\"what's up\") ||\n      msg.includes(\"what's good\") ||\n      msg.includes(\"hello\") ||\n      msg.includes(\"howdy\") ||\n      msg.includes(\"hola\") ||\n      msg.includes(\"how are you\") ||\n      msg.includes(\"what's the sitch\")\n    ) {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: greetings[Math.floor(Math.random() * greetings.length)],\n        },\n      ]);\n    } else {\n      setMessages((messages) => [\n        ...messages,\n        {\n          who: \"bot\",\n          text: noComprendo[Math.floor(Math.random() * noComprendo.length)],\n        },\n      ]);\n    }\n  }\n\n  const messageEl = useRef(null);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <div className=\"head\">\n        Chat\n        <span\n          className=\"close-mode-box\"\n          style={{ color: \"yellow\", backgroundColor: \"#2d3436\" }}\n          onClick={(e) => setChatShowing(false)}\n        >\n          â€•\n        </span>\n      </div>\n      <div className=\"messages\" ref={messageEl}>\n        {messages.map((m, i) => (\n          <div\n            className=\"msg\"\n            key={i}\n            style={\n              m.who === \"bot\"\n                ? { backgroundColor: \"lightblue\" }\n                : { backgroundColor: \"white\", textAlign: \"right\" }\n            }\n          >\n            {m.who === \"bot\" ? (\n              <>\n                <span\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => setSecretFlag(!secretFlag)}\n                >\n                  {secretFlag ? address.flag_emoji : \"ðŸ¤–\"}\n                </span>{\" \"}\n                <span>\n                  {typeof m.text === \"string\"\n                    ? m.text\n                    : m.text.map((word, i) => (\n                        <span\n                          className=\"tooltip\"\n                          // onMouseEnter={() => setShowEnglishWord(true)}\n                          // onMouseLeave={() => setShowEnglishWord(false)}\n                          // title={\n                          //   showEnglishWord\n                          //     ? address.food.translation_arr[i]\n                          //     : \"\"\n                          // }\n                        >\n                          {word}\n                          <span class=\"tooltiptext\">Tooltip text</span>\n                        </span>\n                      ))}\n                </span>{\" \"}\n              </>\n            ) : (\n              m.text + \"  ðŸ§³\"\n            )}\n          </div>\n        ))}\n      </div>\n      <div className=\"footer\">\n        <form onSubmit={handleSend}>\n          <span>\n            <input\n              type=\"text\"\n              placeholder={\n                messages.length ? \"reply...\" : \"Start conversation...\"\n              }\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n            ></input>\n            <button style={{ backgroundColor: \"green\", color: \"white\" }}>\n              Send\n            </button>\n          </span>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}