{"ast":null,"code":"var _jsxFileName = \"/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { MapillaryViewer } from \"react-mapillary\"; // const europe = [\n//   \"Albania\",\n//   \"Andorra\",\n//   \"Armenia\",\n//   \"Austria\",\n//   \"Azerbaijan\",\n//   \"Belarus\",\n//   \"Belgium\",\n//   \"Bosnia and Herzegovina\",\n//   \"Bosnia\",\n//   \"Herzegovina\",\n//   \"Bosnia-Herzegovina\",\n//   \"Bulgaria\",\n//   \"Croatia\",\n//   \"Cyprus\",\n//   \"Czechia\",\n//   \"Denmark\",\n//   \"Estonia\",\n//   \"Finland\",\n//   \"France\",\n//   \"Georgia\",\n//   \"Germany\",\n//   \"Greece\",\n//   \"Hungary\",\n//   \"Iceland\",\n//   \"Ireland\",\n//   \"Italy\",\n//   \"Kazakhstan\",\n//   \"Kosovo\",\n//   \"Latvia\",\n//   \"Liechtenstein\",\n//   \"Lithuania\",\n//   \"Luxembourg\",\n//   \"Malta\",\n//   \"Moldova\",\n//   \"Monaco\",\n//   \"Montenegro\",\n//   \"Netherlands\",\n//   \"North Macedonia\",\n//   \"Macedonia\",\n//   \"Norway\",\n//   \"Poland\",\n//   \"Portugal\",\n//   \"Romania\",\n//   \"Russia\",\n//   \"San Marino\",\n//   \"Serbia\",\n//   \"Slovakia\",\n//   \"Slovenia\",\n//   \"Spain\",\n//   \"Sweden\",\n//   \"Switzerland\",\n//   \"Turkey\",\n//   \"Ukraine\",\n//   \"United Kingdom\",\n//   \"UK\",\n//   \"Vatican City\",\n// ];\n// const asia = [\n//   \"Afghanistan\",\n//   \"Armenia\",\n//   \"Azerbaijan\",\n//   \"Bahrain\",\n//   \"Bangladesh\",\n//   \"Bhutan\",\n//   \"Brunei\",\n//   \"Cambodia\",\n//   \"China\",\n//   \"Cyprus\",\n//   \"Georgia\",\n//   \"India\",\n//   \"Indonesia\",\n//   \"Iran\",\n//   \"Iraq\",\n//   \"Israel\",\n//   \"Japan\",\n//   \"Jordan\",\n//   \"Kazakhstan\",\n//   \"Kuwait\",\n//   \"Kyrgyzstan\",\n//   \"Laos\",\n//   \"Lebanon\",\n//   \"Macao\",\n//   \"Macau\",\n//   \"Malaysia\",\n//   \"Maldives\",\n//   \"Mongolia\",\n//   \"Myanmar\",\n//   \"Burma\",\n//   \"Nepal\",\n//   \"North Korea\",\n//   \"Oman\",\n//   \"Pakistan\",\n//   \"Palestine\",\n//   \"Philippines\",\n//   \"Qatar\",\n//   \"Russia\",\n//   \"Saudi Arabia\",\n//   \"Singapore\",\n//   \"South Korea\",\n//   \"Sri Lanka\",\n//   \"Syria\",\n//   \"Taiwan\",\n//   \"Tajikistan\",\n//   \"Thailand\",\n//   \"Timor-Leste\",\n//   \"Turkey\",\n//   \"Turkmenistan\",\n//   \"United Arab Emirates\",\n//   \"UAE\",\n//   \"Uzbekistan\",\n//   \"Vietnam\",\n//   \"Yemen\",\n// ];\n// const africa = [\n//   \"Algeria\",\n//   \"Angola\",\n//   \"Benin\",\n//   \"Botswana\",\n//   \"Burkina Faso\",\n//   \"Burundi\",\n//   \"Cabo Verde\",\n//   \"Cameroon\",\n//   \"Central African Republic\",\n//   \"CAR\",\n//   \"Chad\",\n//   \"Comoros\",\n//   \"Congo, Democratic Republic of the\",\n//   \"Democratic Republic of the Congo\",\n//   \"Congo, Republic of the\",\n//   \"Republic of the Congo\",\n//   \"Cote d'Ivoire\",\n//   \"Djibouti\",\n//   \"Egypt\",\n//   \"Equatorial Guinea\",\n//   \"Eritrea\",\n//   \"Eswatini\",\n//   \"Swaziland\",\n//   \"Ethiopia\",\n//   \"Gabon\",\n//   \"Gambia\",\n//   \"Ghana\",\n//   \"Guinea\",\n//   \"Guinea-Bissau\",\n//   \"Kenya\",\n//   \"Lesotho\",\n//   \"Liberia\",\n//   \"Libya\",\n//   \"Madagascar\",\n//   \"Malawi\",\n//   \"Mali\",\n//   \"Mauritania\",\n//   \"Mauritius\",\n//   \"Morocco\",\n//   \"Mozambique\",\n//   \"Namibia\",\n//   \"Niger\",\n//   \"Nigeria\",\n//   \"Rwanda\",\n//   \"Sao Tome and Principe\",\n//   \"Sao Tome\",\n//   \"Principe\",\n//   \"Saint Thomas and Prince\",\n//   \"Senegal\",\n//   \"Seychelles\",\n//   \"Sierra Leone\",\n//   \"Somalia\",\n//   \"South Africa\",\n//   \"South Sudan\",\n//   \"Sudan\",\n//   \"Tanzania\",\n//   \"Togo\",\n//   \"Tunisia\",\n//   \"Uganda\",\n//   \"Zambia\",\n//   \"Zimbabwe\",\n// ];\n// const northAmerica = [\n//   \"Antigua and Barbuda\",\n//   \"Bahamas\",\n//   \"Barbados\",\n//   \"Belize\",\n//   \"Canada\",\n//   \"Costa Rica\",\n//   \"Cuba\",\n//   \"Dominica\",\n//   \"Dominican Republic\",\n//   \"El Salvador\",\n//   \"Grenada\",\n//   \"Guatemala\",\n//   \"Haiti\",\n//   \"Honduras\",\n//   \"Jamaica\",\n//   \"Mexico\",\n//   \"Nicaragua\",\n//   \"Panama\",\n//   \"Saint Kitts and Nevis\",\n//   \"Saint Lucia\",\n//   \"Saint Vincent and the Grenadines\",\n//   \"Trinidad and Tobago\",\n//   \"United States of America\",\n//   \"United States\",\n//   \"US\",\n//   \"USA\",\n//   \"Anguilla\",\n//   \"Aruba\",\n//   \"Bermuda\",\n//   \"Bonaire\",\n//   \"British Virgin Islands\",\n//   \"Cayman Islands\",\n//   \"Clipperton Island\",\n//   \"Curacao\",\n//   \"Greenland\",\n//   \"Guadeloupe\",\n//   \"Martinique\",\n//   \"Montserrat\",\n//   \"Navassa Island\",\n//   \"Puerto Rico\",\n//   \"Saba\",\n//   \"Saint Barthelemy\",\n//   \"Saint Martin\",\n//   \"Saint Pierre and Miquelon\",\n//   \"Sint Eustatius\",\n//   \"Sint Maarten\",\n//   \"Turks and Caicos Islands\",\n//   \"US Virgin Islands\",\n// ];\n// const southAmerica = [\n//   \"Argentina\",\n//   \"Bolivia\",\n//   \"Brazil\",\n//   \"Chile\",\n//   \"Colombia\",\n//   \"Ecuador\",\n//   \"Guyana\",\n//   \"Paraguay\",\n//   \"Peru\",\n//   \"Suriname\",\n//   \"Uruguay\",\n//   \"Venezuela\",\n//   \"Falkland Islands\",\n//   \"Falkland Islands (Islas Malvinas)\",\n//   \"Islas Malvinas\",\n//   \"French Guiana\",\n//   \"South Georgia and the South Sandwich Islands\",\n// ];\n// const oceania = [\n//   \"Australia\",\n//   \"Fiji\",\n//   \"Kiribati\",\n//   \"Marshall Islands\",\n//   \"Micronesia\",\n//   \"Nauru\",\n//   \"New Zealand\",\n//   \"Palau\",\n//   \"Papua New Guinea\",\n//   \"Samoa\",\n//   \"Solomon Islands\",\n//   \"Tonga\",\n//   \"Tuvalu\",\n//   \"Vanuatu\",\n//   \"American Samoa\",\n//   \"Cook Islands\",\n//   \"French Polynesia\",\n//   \"Guam\",\n//   \"New Caledonia\",\n//   \"Niue\",\n//   \"Norfolk Island\",\n//   \"Northern Mariana Islands\",\n//   \"Pitcairn Islands\",\n//   \"Tokelau\",\n//   \"Wake Island\",\n//   \"Wallis and Futuna\",\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map({\n  imgKey\n}) {\n  _s();\n\n  const [latlong, setLatlong] = useState({\n    lat: 0,\n    long: 0\n  });\n  console.log(latlong);\n  {//the following comments are mostly from when i was fetching random mapillary images - and they depended on state being located here.\n    // function randCoord() {\n    //   // LATITUDE -90 to +90\n    //   let lat = (Math.random() * 90).toFixed(3);\n    //   if (Math.random() < 0.5) {\n    //     lat = lat * -1;\n    //   }\n    //   // LONGITUDE -180 to + 180\n    //   let long = (Math.random() * 180).toFixed(3);\n    //   if (Math.random() < 0.5) {\n    //     long = long * -1;\n    //   }\n    //   return { lat: parseFloat(lat), long: parseFloat(long) }; //why the heck would i need to do this??? long was a string and lat wasnt...\n    // }\n    // function makebbox() {\n    //   const coord = randCoord();\n    //   return {\n    //     minlong: coord.long - 4,\n    //     minlat: coord.lat - 2,\n    //     maxlong: coord.long + 4,\n    //     maxlat: coord.lat + 2,\n    //   };\n    // }\n    // useEffect(() => {\n    //   fetchSequences();\n    // }, []); //[trigger]\n    // function fetchSequences() {\n    //   const bbox = makebbox();\n    //   fetch(\n    //     `https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${\n    //       bbox.minlat\n    //     },${bbox.maxlong},${\n    //       bbox.maxlat\n    //     }&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`\n    //   )\n    //     .then((r) => r.json())\n    //     .then((data) => getApic(data));\n    // }\n    // function getApic(data) {\n    //   console.log(\"justfetchedsomestuff\", data);\n    //   // if (data.features) {\n    //   if (data.features.length < 30) {\n    //     fetchSequences(); //setTrigger(true);\n    //   } else {\n    //     let feature =\n    //       data.features[Math.floor(Math.random() * data.features.length)];\n    //     console.log(\"did this work? grabbing a random sample\", feature);\n    //     let count = 0;\n    //     while (\n    //       feature.properties.coordinateProperties.image_keys.length < 30 &&\n    //       count < 3 * data.features.length\n    //     ) {\n    //       feature = data.features.sample;\n    //       count++;\n    //     }\n    //     if (count === 3 * data.features.length) {\n    //       fetchSequences(); // setTrigger(true);\n    //     } else {\n    //       console.log(feature.properties.coordinateProperties.image_keys[0]);\n    //       setLatlong({\n    //         lat: feature.geometry.coordinates[0],\n    //         long: feature.geometry.coordinates[1],\n    //       });\n    //       setImgKey(feature.properties.coordinateProperties.image_keys[0]);\n    //     }\n    //   }\n    //   //  }\n    // }\n    // console.log(address);\n    // useEffect(() => {\n    //   fetch(`${api}/city_info`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       accept: \"application/json\",\n    //     },\n    //     body: JSON.stringify(latlong),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((body) => handleLocationData(body));\n    // }, [imgKey]); // [latlong]\n    // function handleLocationData(data) {\n    //   setAddress({\n    //     city: \"\",\n    //     state: \"\",\n    //     country: \"\",\n    //     continent: \"\",\n    //   });\n    //   console.log(\"does this look right to you?\", data, typeof data);\n    //   if (!data.error) {\n    //     data.forEach((d) => {\n    //       if (d.types.includes(\"country\")) {\n    //         const countryName = d.long_name;\n    //         if (europe.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Europe\",\n    //           }));\n    //         } else if (asia.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Asia\",\n    //           }));\n    //         } else if (africa.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Africa\",\n    //           }));\n    //         } else if (northAmerica.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"North America\",\n    //           }));\n    //         } else if (southAmerica.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"South America\",\n    //           }));\n    //         } else if (oceania.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Oceania/Australia\",\n    //           }));\n    //         }\n    //       } else if (\n    //         d.types.includes(\"locality\") ||\n    //         d.types.includes(\"administrative_area_level_1\")\n    //       ) {\n    //         const stateName = d.long_name;\n    //         setAddress((address) => ({ ...address, state: stateName }));\n    //       } else if (\n    //         d.types.includes(\"sublocality\") ||\n    //         d.types.includes(\"administrative_area_level_2\")\n    //       ) {\n    //         const cityName = d.long_name;\n    //         setAddress((address) => ({ ...address, city: cityName }));\n    //       }\n    //     });\n    //     console.log(\"finished finding geography info\");\n    //     setStamp(!stamp);\n    //   }\n    // }\n    // useEffect(() => {\n    //   fetch(`${api}/stamp/${user.id}`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"content-type\": \"application/json\",\n    //       accept: \"application/json\",\n    //     },\n    //     body: JSON.stringify(address),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((reply) => console.log(\"saved this place, or tried to\", reply));\n    // }, [stamp]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\" // role=\"button\"\n    // tabIndex=\"-1\"\n    ,\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapillaryViewer, {\n      clientId: \"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\",\n      imageKey: imgKey // filter={[\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"]}\n      // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n      // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n      ,\n      onNodeChanged: node => {\n        console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n        setLatlong({\n          lat: node.latLon.lat,\n          long: node.latLon.lon\n        });\n      } // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 446,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"1Oi8XmJfQUIxMDuVybcul0iwys4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/zd/Flatiron/Projects/Phase5/couchbound-traveler/frontend/src/Map.js"],"names":["useEffect","useState","React","MapillaryViewer","Map","imgKey","latlong","setLatlong","lat","long","console","log","width","height","node","latLon","lon"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,iBAAha;AAAEC,EAAAA;AAAF,CAAb,EAAyB;AAAA;;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC;AAAEO,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,IAAI,EAAE;AAAhB,GAAD,CAAtC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEA,GACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACD,sBACE;AACE,IAAA,EAAE,EAAC,eADL,CAEE;AACA;AAHF;AAIE,IAAA,KAAK,EAAE;AACLM,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,MAAM,EAAE;AAFH,KAJT;AAAA,2BASE,QAAC,eAAD;AACE,MAAA,QAAQ,EAAC,sDADX;AAEE,MAAA,QAAQ,EAAER,MAFZ,CAGE;AACA;AACA;AALF;AAME,MAAA,aAAa,EAAGS,IAAD,IAAU;AACvBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBG,IAAI,CAACC,MAAL,CAAYP,GAAhC,EAAqC,OAArC,EAA8CM,IAAI,CAACC,MAAL,CAAYC,GAA1D;AACAT,QAAAA,UAAU,CAAC;AAAEC,UAAAA,GAAG,EAAEM,IAAI,CAACC,MAAL,CAAYP,GAAnB;AAAwBC,UAAAA,IAAI,EAAEK,IAAI,CAACC,MAAL,CAAYC;AAA1C,SAAD,CAAV;AACD,OATH,CAUE;;AAVF;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA9LQZ,G;;KAAAA,G;AAgMT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { MapillaryViewer } from \"react-mapillary\";\n// const europe = [\n//   \"Albania\",\n//   \"Andorra\",\n//   \"Armenia\",\n//   \"Austria\",\n//   \"Azerbaijan\",\n//   \"Belarus\",\n//   \"Belgium\",\n//   \"Bosnia and Herzegovina\",\n//   \"Bosnia\",\n//   \"Herzegovina\",\n//   \"Bosnia-Herzegovina\",\n//   \"Bulgaria\",\n//   \"Croatia\",\n//   \"Cyprus\",\n//   \"Czechia\",\n//   \"Denmark\",\n//   \"Estonia\",\n//   \"Finland\",\n//   \"France\",\n//   \"Georgia\",\n//   \"Germany\",\n//   \"Greece\",\n//   \"Hungary\",\n//   \"Iceland\",\n//   \"Ireland\",\n//   \"Italy\",\n//   \"Kazakhstan\",\n//   \"Kosovo\",\n//   \"Latvia\",\n//   \"Liechtenstein\",\n//   \"Lithuania\",\n//   \"Luxembourg\",\n//   \"Malta\",\n//   \"Moldova\",\n//   \"Monaco\",\n//   \"Montenegro\",\n//   \"Netherlands\",\n//   \"North Macedonia\",\n//   \"Macedonia\",\n//   \"Norway\",\n//   \"Poland\",\n//   \"Portugal\",\n//   \"Romania\",\n//   \"Russia\",\n//   \"San Marino\",\n//   \"Serbia\",\n//   \"Slovakia\",\n//   \"Slovenia\",\n//   \"Spain\",\n//   \"Sweden\",\n//   \"Switzerland\",\n//   \"Turkey\",\n//   \"Ukraine\",\n//   \"United Kingdom\",\n//   \"UK\",\n//   \"Vatican City\",\n// ];\n// const asia = [\n//   \"Afghanistan\",\n//   \"Armenia\",\n//   \"Azerbaijan\",\n//   \"Bahrain\",\n//   \"Bangladesh\",\n//   \"Bhutan\",\n//   \"Brunei\",\n//   \"Cambodia\",\n//   \"China\",\n//   \"Cyprus\",\n//   \"Georgia\",\n//   \"India\",\n//   \"Indonesia\",\n//   \"Iran\",\n//   \"Iraq\",\n//   \"Israel\",\n//   \"Japan\",\n//   \"Jordan\",\n//   \"Kazakhstan\",\n//   \"Kuwait\",\n//   \"Kyrgyzstan\",\n//   \"Laos\",\n//   \"Lebanon\",\n//   \"Macao\",\n//   \"Macau\",\n//   \"Malaysia\",\n//   \"Maldives\",\n//   \"Mongolia\",\n//   \"Myanmar\",\n//   \"Burma\",\n//   \"Nepal\",\n//   \"North Korea\",\n//   \"Oman\",\n//   \"Pakistan\",\n//   \"Palestine\",\n//   \"Philippines\",\n//   \"Qatar\",\n//   \"Russia\",\n//   \"Saudi Arabia\",\n//   \"Singapore\",\n//   \"South Korea\",\n//   \"Sri Lanka\",\n//   \"Syria\",\n//   \"Taiwan\",\n//   \"Tajikistan\",\n//   \"Thailand\",\n//   \"Timor-Leste\",\n//   \"Turkey\",\n//   \"Turkmenistan\",\n//   \"United Arab Emirates\",\n//   \"UAE\",\n//   \"Uzbekistan\",\n//   \"Vietnam\",\n//   \"Yemen\",\n// ];\n// const africa = [\n//   \"Algeria\",\n//   \"Angola\",\n//   \"Benin\",\n//   \"Botswana\",\n//   \"Burkina Faso\",\n//   \"Burundi\",\n//   \"Cabo Verde\",\n//   \"Cameroon\",\n//   \"Central African Republic\",\n//   \"CAR\",\n//   \"Chad\",\n//   \"Comoros\",\n//   \"Congo, Democratic Republic of the\",\n//   \"Democratic Republic of the Congo\",\n//   \"Congo, Republic of the\",\n//   \"Republic of the Congo\",\n//   \"Cote d'Ivoire\",\n//   \"Djibouti\",\n//   \"Egypt\",\n//   \"Equatorial Guinea\",\n//   \"Eritrea\",\n//   \"Eswatini\",\n//   \"Swaziland\",\n//   \"Ethiopia\",\n//   \"Gabon\",\n//   \"Gambia\",\n//   \"Ghana\",\n//   \"Guinea\",\n//   \"Guinea-Bissau\",\n//   \"Kenya\",\n//   \"Lesotho\",\n//   \"Liberia\",\n//   \"Libya\",\n//   \"Madagascar\",\n//   \"Malawi\",\n//   \"Mali\",\n//   \"Mauritania\",\n//   \"Mauritius\",\n//   \"Morocco\",\n//   \"Mozambique\",\n//   \"Namibia\",\n//   \"Niger\",\n//   \"Nigeria\",\n//   \"Rwanda\",\n//   \"Sao Tome and Principe\",\n//   \"Sao Tome\",\n//   \"Principe\",\n//   \"Saint Thomas and Prince\",\n//   \"Senegal\",\n//   \"Seychelles\",\n//   \"Sierra Leone\",\n//   \"Somalia\",\n//   \"South Africa\",\n//   \"South Sudan\",\n//   \"Sudan\",\n//   \"Tanzania\",\n//   \"Togo\",\n//   \"Tunisia\",\n//   \"Uganda\",\n//   \"Zambia\",\n//   \"Zimbabwe\",\n// ];\n// const northAmerica = [\n//   \"Antigua and Barbuda\",\n//   \"Bahamas\",\n//   \"Barbados\",\n//   \"Belize\",\n//   \"Canada\",\n//   \"Costa Rica\",\n//   \"Cuba\",\n//   \"Dominica\",\n//   \"Dominican Republic\",\n//   \"El Salvador\",\n//   \"Grenada\",\n//   \"Guatemala\",\n//   \"Haiti\",\n//   \"Honduras\",\n//   \"Jamaica\",\n//   \"Mexico\",\n//   \"Nicaragua\",\n//   \"Panama\",\n//   \"Saint Kitts and Nevis\",\n//   \"Saint Lucia\",\n//   \"Saint Vincent and the Grenadines\",\n//   \"Trinidad and Tobago\",\n//   \"United States of America\",\n//   \"United States\",\n//   \"US\",\n//   \"USA\",\n//   \"Anguilla\",\n//   \"Aruba\",\n//   \"Bermuda\",\n//   \"Bonaire\",\n//   \"British Virgin Islands\",\n//   \"Cayman Islands\",\n//   \"Clipperton Island\",\n//   \"Curacao\",\n//   \"Greenland\",\n//   \"Guadeloupe\",\n//   \"Martinique\",\n//   \"Montserrat\",\n//   \"Navassa Island\",\n//   \"Puerto Rico\",\n//   \"Saba\",\n//   \"Saint Barthelemy\",\n//   \"Saint Martin\",\n//   \"Saint Pierre and Miquelon\",\n//   \"Sint Eustatius\",\n//   \"Sint Maarten\",\n//   \"Turks and Caicos Islands\",\n//   \"US Virgin Islands\",\n// ];\n// const southAmerica = [\n//   \"Argentina\",\n//   \"Bolivia\",\n//   \"Brazil\",\n//   \"Chile\",\n//   \"Colombia\",\n//   \"Ecuador\",\n//   \"Guyana\",\n//   \"Paraguay\",\n//   \"Peru\",\n//   \"Suriname\",\n//   \"Uruguay\",\n//   \"Venezuela\",\n//   \"Falkland Islands\",\n//   \"Falkland Islands (Islas Malvinas)\",\n//   \"Islas Malvinas\",\n//   \"French Guiana\",\n//   \"South Georgia and the South Sandwich Islands\",\n// ];\n// const oceania = [\n//   \"Australia\",\n//   \"Fiji\",\n//   \"Kiribati\",\n//   \"Marshall Islands\",\n//   \"Micronesia\",\n//   \"Nauru\",\n//   \"New Zealand\",\n//   \"Palau\",\n//   \"Papua New Guinea\",\n//   \"Samoa\",\n//   \"Solomon Islands\",\n//   \"Tonga\",\n//   \"Tuvalu\",\n//   \"Vanuatu\",\n//   \"American Samoa\",\n//   \"Cook Islands\",\n//   \"French Polynesia\",\n//   \"Guam\",\n//   \"New Caledonia\",\n//   \"Niue\",\n//   \"Norfolk Island\",\n//   \"Northern Mariana Islands\",\n//   \"Pitcairn Islands\",\n//   \"Tokelau\",\n//   \"Wake Island\",\n//   \"Wallis and Futuna\",\n// ];\n\nfunction Map({ imgKey }) {\n  const [latlong, setLatlong] = useState({ lat: 0, long: 0 });\n  console.log(latlong);\n\n  {\n    //the following comments are mostly from when i was fetching random mapillary images - and they depended on state being located here.\n    // function randCoord() {\n    //   // LATITUDE -90 to +90\n    //   let lat = (Math.random() * 90).toFixed(3);\n    //   if (Math.random() < 0.5) {\n    //     lat = lat * -1;\n    //   }\n    //   // LONGITUDE -180 to + 180\n    //   let long = (Math.random() * 180).toFixed(3);\n    //   if (Math.random() < 0.5) {\n    //     long = long * -1;\n    //   }\n    //   return { lat: parseFloat(lat), long: parseFloat(long) }; //why the heck would i need to do this??? long was a string and lat wasnt...\n    // }\n    // function makebbox() {\n    //   const coord = randCoord();\n    //   return {\n    //     minlong: coord.long - 4,\n    //     minlat: coord.lat - 2,\n    //     maxlong: coord.long + 4,\n    //     maxlat: coord.lat + 2,\n    //   };\n    // }\n    // useEffect(() => {\n    //   fetchSequences();\n    // }, []); //[trigger]\n    // function fetchSequences() {\n    //   const bbox = makebbox();\n    //   fetch(\n    //     `https://a.mapillary.com/v3/sequences?bbox=${bbox.minlong},${\n    //       bbox.minlat\n    //     },${bbox.maxlong},${\n    //       bbox.maxlat\n    //     }&client_id=${\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"}`\n    //   )\n    //     .then((r) => r.json())\n    //     .then((data) => getApic(data));\n    // }\n    // function getApic(data) {\n    //   console.log(\"justfetchedsomestuff\", data);\n    //   // if (data.features) {\n    //   if (data.features.length < 30) {\n    //     fetchSequences(); //setTrigger(true);\n    //   } else {\n    //     let feature =\n    //       data.features[Math.floor(Math.random() * data.features.length)];\n    //     console.log(\"did this work? grabbing a random sample\", feature);\n    //     let count = 0;\n    //     while (\n    //       feature.properties.coordinateProperties.image_keys.length < 30 &&\n    //       count < 3 * data.features.length\n    //     ) {\n    //       feature = data.features.sample;\n    //       count++;\n    //     }\n    //     if (count === 3 * data.features.length) {\n    //       fetchSequences(); // setTrigger(true);\n    //     } else {\n    //       console.log(feature.properties.coordinateProperties.image_keys[0]);\n    //       setLatlong({\n    //         lat: feature.geometry.coordinates[0],\n    //         long: feature.geometry.coordinates[1],\n    //       });\n    //       setImgKey(feature.properties.coordinateProperties.image_keys[0]);\n    //     }\n    //   }\n    //   //  }\n    // }\n    // console.log(address);\n    // useEffect(() => {\n    //   fetch(`${api}/city_info`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       accept: \"application/json\",\n    //     },\n    //     body: JSON.stringify(latlong),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((body) => handleLocationData(body));\n    // }, [imgKey]); // [latlong]\n    // function handleLocationData(data) {\n    //   setAddress({\n    //     city: \"\",\n    //     state: \"\",\n    //     country: \"\",\n    //     continent: \"\",\n    //   });\n    //   console.log(\"does this look right to you?\", data, typeof data);\n    //   if (!data.error) {\n    //     data.forEach((d) => {\n    //       if (d.types.includes(\"country\")) {\n    //         const countryName = d.long_name;\n    //         if (europe.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Europe\",\n    //           }));\n    //         } else if (asia.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Asia\",\n    //           }));\n    //         } else if (africa.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Africa\",\n    //           }));\n    //         } else if (northAmerica.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"North America\",\n    //           }));\n    //         } else if (southAmerica.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"South America\",\n    //           }));\n    //         } else if (oceania.includes(countryName)) {\n    //           setAddress((address) => ({\n    //             ...address,\n    //             country: countryName,\n    //             continent: \"Oceania/Australia\",\n    //           }));\n    //         }\n    //       } else if (\n    //         d.types.includes(\"locality\") ||\n    //         d.types.includes(\"administrative_area_level_1\")\n    //       ) {\n    //         const stateName = d.long_name;\n    //         setAddress((address) => ({ ...address, state: stateName }));\n    //       } else if (\n    //         d.types.includes(\"sublocality\") ||\n    //         d.types.includes(\"administrative_area_level_2\")\n    //       ) {\n    //         const cityName = d.long_name;\n    //         setAddress((address) => ({ ...address, city: cityName }));\n    //       }\n    //     });\n    //     console.log(\"finished finding geography info\");\n    //     setStamp(!stamp);\n    //   }\n    // }\n    // useEffect(() => {\n    //   fetch(`${api}/stamp/${user.id}`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"content-type\": \"application/json\",\n    //       accept: \"application/json\",\n    //     },\n    //     body: JSON.stringify(address),\n    //   })\n    //     .then((r) => r.json())\n    //     .then((reply) => console.log(\"saved this place, or tried to\", reply));\n    // }, [stamp]);\n  }\n  return (\n    <div\n      id=\"map-container\"\n      // role=\"button\"\n      // tabIndex=\"-1\"\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      <MapillaryViewer\n        clientId=\"MHZvSFJXZjRWR0p0YWZpODRTMDhDbjoxOTUzYjNlMjVlMWM0NTcw\"\n        imageKey={imgKey}\n        // filter={[\"==\", \"userKey\", \"2PiRXqdqbY47WzG6CRzEIA\"]}\n        // onTiltChanged={(tilt) => console.log(`Tilt: ${tilt}`)} //vertical angle\n        // onFovChanged={(fov) => console.log(`FoV: ${fov}`)}  //zoom\n        onNodeChanged={(node) => {\n          console.log(\"Lat:\", node.latLon.lat, \"Long:\", node.latLon.lon);\n          setLatlong({ lat: node.latLon.lat, long: node.latLon.lon });\n        }}\n        // onBearingChanged={(bearing) => console.log(`Bearing: ${bearing}`)} //horiz angle\n      />\n    </div>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}